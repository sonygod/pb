// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_PermutationBit
#include <PermutationBit.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c26d964248a78cd2_7_new,"PermutationBit","new",0xf4e017f9,"PermutationBit.new","PermutationBit.hx",7,0xb554c997)
HX_LOCAL_STACK_FRAME(_hx_pos_c26d964248a78cd2_53_copyBytes,"PermutationBit","copyBytes",0x7762accf,"PermutationBit.copyBytes","PermutationBit.hx",53,0xb554c997)
HX_LOCAL_STACK_FRAME(_hx_pos_c26d964248a78cd2_56_heapPermutation,"PermutationBit","heapPermutation",0x261e7453,"PermutationBit.heapPermutation","PermutationBit.hx",56,0xb554c997)
HX_LOCAL_STACK_FRAME(_hx_pos_c26d964248a78cd2_10_boot,"PermutationBit","boot",0x474de279,"PermutationBit.boot","PermutationBit.hx",10,0xb554c997)

void PermutationBit_obj::__construct( ::haxe::io::Bytes array, ::Dynamic callBack,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_c26d964248a78cd2_7_new)
HXLINE(  15)		this->len = 0;
HXLINE(  14)		this->lastIndex = 0;
HXLINE(   8)		this->result = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  20)		this->len = array->length;
HXLINE(  22)		if ((::PermutationBit_obj::total == 1)) {
HXLINE(  23)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  23)			{
HXLINE(  23)				int _g1 = 0;
HXDLIN(  23)				int _g2 = this->len;
HXDLIN(  23)				while((_g1 < _g2)){
HXLINE(  23)					_g1 = (_g1 + 1);
HXDLIN(  23)					int ii = (_g1 - 1);
HXDLIN(  23)					_g->push((ii + 1));
            				}
            			}
HXDLIN(  23)			::Array< int > arr = _g;
HXLINE(  24)			int i = (arr->length - 1);
HXLINE(  26)			while((i > 0)){
HXLINE(  27)				int v = arr->__get(i);
HXLINE(  28)				 ::Dynamic _hx_tmp = hx::ClassOf< ::PermutationBit >();
HXDLIN(  28)				::PermutationBit_obj::total = (::PermutationBit_obj::total * v);
HXLINE(  29)				i = (i - 1);
            			}
HXLINE(  31)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::PermutationBit >();
HXDLIN(  31)			::PermutationBit_obj::total = (::PermutationBit_obj::total * this->len);
            		}
HXLINE(  34)		this->heapPermutation(array,this->len,::PermutationBit_obj::total,callBack,result);
            	}

Dynamic PermutationBit_obj::__CreateEmpty() { return new PermutationBit_obj; }

void *PermutationBit_obj::_hx_vtable = 0;

Dynamic PermutationBit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PermutationBit_obj > _hx_result = new PermutationBit_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PermutationBit_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ec1764f;
}

 ::haxe::io::Bytes PermutationBit_obj::copyBytes( ::haxe::io::Bytes b){
            	HX_STACKFRAME(&_hx_pos_c26d964248a78cd2_53_copyBytes)
HXDLIN(  53)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PermutationBit_obj,copyBytes,return )

void PermutationBit_obj::heapPermutation( ::haxe::io::Bytes a,int size,int total, ::Dynamic callBack,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_c26d964248a78cd2_56_heapPermutation)
HXLINE(  57)		if ((size == 1)) {
HXLINE(  59)			 ::haxe::io::Bytes b = this->copyBytes(a);
HXLINE(  61)			this->lastIndex = (this->lastIndex + this->len);
HXLINE(  62)			if ((this->lastIndex == total)) {
HXLINE(  63)				callBack(( ( ::haxe::io::Bytes)(_hx_array_unsafe_get(result,0)) ));
            			}
            		}
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			int _g1 = size;
HXDLIN(  67)			while((_g < _g1)){
HXLINE(  67)				_g = (_g + 1);
HXDLIN(  67)				int i = (_g - 1);
HXLINE(  68)				int s = (size - 1);
HXLINE(  70)				this->heapPermutation(a,s,total,callBack,result);
HXLINE(  73)				if (((size & 1) == 1)) {
HXLINE(  74)					int temp = ( (int)(a->b->__get(0)) );
HXLINE(  77)					a->b[0] = a->b->__get((size - 1));
HXLINE(  79)					a->b[(size - 1)] = ( (unsigned char)(temp) );
            				}
            				else {
HXLINE(  81)					int temp1 = ( (int)(a->b->__get(i)) );
HXLINE(  85)					a->b[i] = a->b->__get((size - 1));
HXLINE(  87)					a->b[(size - 1)] = ( (unsigned char)(temp1) );
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(PermutationBit_obj,heapPermutation,(void))

int PermutationBit_obj::total;


hx::ObjectPtr< PermutationBit_obj > PermutationBit_obj::__new( ::haxe::io::Bytes array, ::Dynamic callBack,::Array< ::Dynamic> result) {
	hx::ObjectPtr< PermutationBit_obj > __this = new PermutationBit_obj();
	__this->__construct(array,callBack,result);
	return __this;
}

hx::ObjectPtr< PermutationBit_obj > PermutationBit_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Bytes array, ::Dynamic callBack,::Array< ::Dynamic> result) {
	PermutationBit_obj *__this = (PermutationBit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PermutationBit_obj), true, "PermutationBit"));
	*(void **)__this = PermutationBit_obj::_hx_vtable;
	__this->__construct(array,callBack,result);
	return __this;
}

PermutationBit_obj::PermutationBit_obj()
{
}

void PermutationBit_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PermutationBit);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(callBack,"callBack");
	HX_MARK_MEMBER_NAME(lastIndex,"lastIndex");
	HX_MARK_MEMBER_NAME(len,"len");
	HX_MARK_END_CLASS();
}

void PermutationBit_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(callBack,"callBack");
	HX_VISIT_MEMBER_NAME(lastIndex,"lastIndex");
	HX_VISIT_MEMBER_NAME(len,"len");
}

hx::Val PermutationBit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { return hx::Val( len ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callBack") ) { return hx::Val( callBack ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { return hx::Val( lastIndex ); }
		if (HX_FIELD_EQ(inName,"copyBytes") ) { return hx::Val( copyBytes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"heapPermutation") ) { return hx::Val( heapPermutation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PermutationBit_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { outValue = ( total ); return true; }
	}
	return false;
}

hx::Val PermutationBit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callBack") ) { callBack=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { lastIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PermutationBit_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { total=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PermutationBit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("result",dd,68,84,08));
	outFields->push(HX_("lastIndex",dc,c8,c1,0a));
	outFields->push(HX_("len",d5,4b,52,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PermutationBit_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PermutationBit_obj,result),HX_("result",dd,68,84,08)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PermutationBit_obj,callBack),HX_("callBack",e5,c5,df,69)},
	{hx::fsInt,(int)offsetof(PermutationBit_obj,lastIndex),HX_("lastIndex",dc,c8,c1,0a)},
	{hx::fsInt,(int)offsetof(PermutationBit_obj,len),HX_("len",d5,4b,52,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PermutationBit_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &PermutationBit_obj::total,HX_("total",c4,53,32,14)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PermutationBit_obj_sMemberFields[] = {
	HX_("result",dd,68,84,08),
	HX_("callBack",e5,c5,df,69),
	HX_("lastIndex",dc,c8,c1,0a),
	HX_("len",d5,4b,52,00),
	HX_("copyBytes",76,2c,93,43),
	HX_("heapPermutation",3a,ab,b8,7c),
	::String(null()) };

static void PermutationBit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PermutationBit_obj::total,"total");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PermutationBit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PermutationBit_obj::total,"total");
};

#endif

hx::Class PermutationBit_obj::__mClass;

static ::String PermutationBit_obj_sStaticFields[] = {
	HX_("total",c4,53,32,14),
	::String(null())
};

void PermutationBit_obj::__register()
{
	PermutationBit_obj _hx_dummy;
	PermutationBit_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("PermutationBit",87,a7,2c,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PermutationBit_obj::__GetStatic;
	__mClass->mSetStaticField = &PermutationBit_obj::__SetStatic;
	__mClass->mMarkFunc = PermutationBit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PermutationBit_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PermutationBit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PermutationBit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PermutationBit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PermutationBit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PermutationBit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PermutationBit_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c26d964248a78cd2_10_boot)
HXDLIN(  10)		total = 1;
            	}
}

