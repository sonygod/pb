// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_PermutationBit
#include <PermutationBit.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_gen_GenKLSF
#include <gen/GenKLSF.h>
#endif
#ifndef INCLUDED_gen_GenKLSFBytes
#include <gen/GenKLSFBytes.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_22_main,"gen.GenKLSFBytes","main",0x6cbbf9c2,"gen.GenKLSFBytes.main","gen/GenKLSFBytes.hx",22,0x001da178)
HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_25_main2,"gen.GenKLSFBytes","main2",0xb7be9030,"gen.GenKLSFBytes.main2","gen/GenKLSFBytes.hx",25,0x001da178)
HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_59_main2,"gen.GenKLSFBytes","main2",0xb7be9030,"gen.GenKLSFBytes.main2","gen/GenKLSFBytes.hx",59,0x001da178)
HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_66_genMulThread,"gen.GenKLSFBytes","genMulThread",0x458ba5c7,"gen.GenKLSFBytes.genMulThread","gen/GenKLSFBytes.hx",66,0x001da178)
static const int _hx_array_data_5f780b85_14[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_115_genMulThread,"gen.GenKLSFBytes","genMulThread",0x458ba5c7,"gen.GenKLSFBytes.genMulThread","gen/GenKLSFBytes.hx",115,0x001da178)
HX_LOCAL_STACK_FRAME(_hx_pos_7eed2e78c5ea9145_135_genMulThread,"gen.GenKLSFBytes","genMulThread",0x458ba5c7,"gen.GenKLSFBytes.genMulThread","gen/GenKLSFBytes.hx",135,0x001da178)
namespace gen{

void GenKLSFBytes_obj::__construct() { }

Dynamic GenKLSFBytes_obj::__CreateEmpty() { return new GenKLSFBytes_obj; }

void *GenKLSFBytes_obj::_hx_vtable = 0;

Dynamic GenKLSFBytes_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GenKLSFBytes_obj > _hx_result = new GenKLSFBytes_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GenKLSFBytes_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x77dac837;
}

void GenKLSFBytes_obj::main(){
            	HX_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_22_main)
HXDLIN(  22)		::gen::GenKLSFBytes_obj::genMulThread();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GenKLSFBytes_obj,main,(void))

void GenKLSFBytes_obj::main2(){
            	HX_GC_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_25_main2)
HXLINE(  26)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  26)		{
HXLINE(  26)			_g->push(1);
HXDLIN(  26)			_g->push(2);
HXDLIN(  26)			_g->push(3);
HXDLIN(  26)			_g->push(4);
HXDLIN(  26)			_g->push(5);
HXDLIN(  26)			_g->push(6);
HXDLIN(  26)			_g->push(7);
HXDLIN(  26)			_g->push(8);
HXDLIN(  26)			_g->push(9);
HXDLIN(  26)			_g->push(10);
HXDLIN(  26)			_g->push(11);
HXDLIN(  26)			_g->push(12);
HXDLIN(  26)			_g->push(13);
HXDLIN(  26)			_g->push(14);
HXDLIN(  26)			_g->push(15);
HXDLIN(  26)			_g->push(16);
HXDLIN(  26)			_g->push(17);
HXDLIN(  26)			_g->push(18);
HXDLIN(  26)			_g->push(19);
HXDLIN(  26)			_g->push(20);
            		}
HXDLIN(  26)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  26)		::Array< ::Dynamic> this2 = this1;
HXDLIN(  26)		::Array< ::Dynamic> ret = this2;
HXDLIN(  26)		ret->__unsafe_set(0,_g);
HXDLIN(  26)		::Array< ::Dynamic> data = ret;
HXLINE(  28)		::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  28)		::Array< ::Dynamic> this4 = this3;
HXDLIN(  28)		::Array< ::Dynamic> ret1 = this4;
HXDLIN(  28)		ret1->__unsafe_set(0,::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  28)		::Array< ::Dynamic> result8 = ret1;
HXLINE(  30)		::gen::GenKLSF_obj::computeAllChoices(data,( (::Array< int >)(_hx_array_unsafe_get(data,0)) )->length,8,0,8,::Array_obj< int >::__new(0),0,result8);
HXLINE(  32)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  32)		::String _hx_tmp1 = (HX_W(u"\u603b\u6570\u662f=",1f00,e1ec) + ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result8,0)) )->length);
HXDLIN(  32)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),32,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("main2",d9,f9,1a,03)));
HXLINE(  33)		int max = 8;
HXLINE(  34)		int total = 1;
HXLINE(  35)		::Array< int > _g1 = ::Array_obj< int >::__new(0);
HXDLIN(  35)		{
HXLINE(  35)			int _g2 = 0;
HXDLIN(  35)			int _g3 = max;
HXDLIN(  35)			while((_g2 < _g3)){
HXLINE(  35)				_g2 = (_g2 + 1);
HXDLIN(  35)				int ii = (_g2 - 1);
HXDLIN(  35)				_g1->push((ii + 1));
            			}
            		}
HXDLIN(  35)		::Array< int > arr = _g1;
HXLINE(  36)		int i = (arr->length - 1);
HXLINE(  38)		while((i > 0)){
HXLINE(  39)			int v = arr->__get(i);
HXLINE(  40)			total = (total * v);
HXLINE(  41)			i = (i - 1);
            		}
HXLINE(  43)		 ::haxe::io::Bytes v1 = ::haxe::io::Bytes_obj::alloc((total * max));
HXDLIN(  43)		::Array< ::Dynamic> this5 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  43)		::Array< ::Dynamic> this6 = this5;
HXDLIN(  43)		::Array< ::Dynamic> ret2 = this6;
HXDLIN(  43)		ret2->__unsafe_set(0,v1);
HXDLIN(  43)		::Array< ::Dynamic> result = ret2;
HXLINE(  44)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(max);
HXLINE(  45)		{
HXLINE(  45)			int _g4 = 0;
HXDLIN(  45)			int _g5 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result8,0)) )->length;
HXDLIN(  45)			while((_g4 < _g5)){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,int,n) HXARGC(1)
            				void _hx_run( ::haxe::io::Bytes d){
            					HX_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_59_main2)
HXLINE(  59)					if ((hx::Mod(n,1000) == 0)) {
HXLINE(  60)						::haxe::Log_obj::trace(n,hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),60,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("main2",d9,f9,1a,03)));
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  45)				_g4 = (_g4 + 1);
HXDLIN(  45)				int n = (_g4 - 1);
HXLINE(  46)				::Array< int > current = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result8,0)) )->__get(n).StaticCast< ::Array< int > >();
HXLINE(  50)				{
HXLINE(  50)					int _g41 = 0;
HXDLIN(  50)					int _g51 = max;
HXDLIN(  50)					while((_g41 < _g51)){
HXLINE(  50)						_g41 = (_g41 + 1);
HXDLIN(  50)						int i1 = (_g41 - 1);
HXLINE(  51)						b->b[i1] = ( (unsigned char)(current->__get(i1)) );
            					}
            				}
HXLINE(  56)				 ::haxe::io::Bytes item = b;
HXLINE(  58)				 ::PermutationBit_obj::__alloc( HX_CTX ,item, ::Dynamic(new _hx_Closure_0(n)),result);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GenKLSFBytes_obj,main2,(void))

void GenKLSFBytes_obj::genMulThread(){
            	HX_GC_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_66_genMulThread)
HXLINE(  69)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  69)		{
HXLINE(  69)			_g->push(1);
HXDLIN(  69)			_g->push(2);
HXDLIN(  69)			_g->push(3);
HXDLIN(  69)			_g->push(4);
HXDLIN(  69)			_g->push(5);
HXDLIN(  69)			_g->push(6);
HXDLIN(  69)			_g->push(7);
HXDLIN(  69)			_g->push(8);
HXDLIN(  69)			_g->push(9);
HXDLIN(  69)			_g->push(10);
HXDLIN(  69)			_g->push(11);
HXDLIN(  69)			_g->push(12);
HXDLIN(  69)			_g->push(13);
HXDLIN(  69)			_g->push(14);
HXDLIN(  69)			_g->push(15);
HXDLIN(  69)			_g->push(16);
HXDLIN(  69)			_g->push(17);
HXDLIN(  69)			_g->push(18);
HXDLIN(  69)			_g->push(19);
HXDLIN(  69)			_g->push(20);
            		}
HXDLIN(  69)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  69)		::Array< ::Dynamic> this2 = this1;
HXDLIN(  69)		::Array< ::Dynamic> ret = this2;
HXDLIN(  69)		ret->__unsafe_set(0,_g);
HXDLIN(  69)		::Array< ::Dynamic> data = ret;
HXLINE(  71)		::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  71)		::Array< ::Dynamic> this4 = this3;
HXDLIN(  71)		::Array< ::Dynamic> ret1 = this4;
HXDLIN(  71)		ret1->__unsafe_set(0,::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  71)		::Array< ::Dynamic> result = ret1;
HXLINE(  73)		::gen::GenKLSF_obj::computeAllChoices(data,( (::Array< int >)(_hx_array_unsafe_get(data,0)) )->length,8,0,8,::Array_obj< int >::__new(0),0,result);
HXLINE(  74)		int len = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->length;
HXLINE(  75)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  75)		::String _hx_tmp1 = (HX_W(u"\u603b\u6570",2ce0,25a9) + ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->length);
HXDLIN(  75)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),75,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
HXLINE(  76)		::Array< int > index = ::Array_obj< int >::fromData( _hx_array_data_5f780b85_14,1);
HXLINE(  78)		int threadCounts = 15;
HXLINE(  80)		int eachCount = ::Std_obj::_hx_int((( (Float)(len) ) / ( (Float)(threadCounts) )));
HXLINE(  82)		::haxe::Log_obj::trace(eachCount,hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),82,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
HXLINE(  83)		int totals = 0;
HXLINE(  85)		{
HXLINE(  85)			int _g1 = 0;
HXDLIN(  85)			int _g2 = threadCounts;
HXDLIN(  85)			while((_g1 < _g2)){
HXLINE(  85)				_g1 = (_g1 + 1);
HXDLIN(  85)				int i = (_g1 - 1);
HXLINE(  86)				int start = (i * eachCount);
HXLINE(  87)				int end = ((i + 1) * eachCount);
HXLINE(  89)				int total = 0;
HXLINE(  91)				{
HXLINE(  91)					int _g11 = start;
HXDLIN(  91)					int _g21 = end;
HXDLIN(  91)					while((_g11 < _g21)){
HXLINE(  91)						_g11 = (_g11 + 1);
HXDLIN(  91)						int k = (_g11 - 1);
HXLINE(  92)						if ((total > end)) {
HXLINE(  93)							::haxe::Log_obj::trace((((((((((HX_("i=",b4,5b,00,00) + i) + HX_(" start=",bb,39,a9,38)) + start) + HX_(" end=",22,ec,e8,af)) + end) + HX_(" total=",19,d0,85,ca)) + total) + HX_(" k=",92,a5,18,00)) + k),hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),93,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
HXLINE(  94)							HX_STACK_DO_THROW(HX_("fuck!",8a,9e,80,08));
            						}
HXLINE(  97)						total = (total + 1);
            					}
            				}
HXLINE( 100)				totals = (totals + total);
HXLINE( 102)				::haxe::Log_obj::trace((((((HX_("totals=",2e,31,42,44) + totals) + HX_("  total=",f9,13,d4,f0)) + total) + HX_(" i=",d4,a3,18,00)) + i),hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),102,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
            			}
            		}
HXLINE( 109)		::haxe::Log_obj::trace(totals,hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),109,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
HXLINE( 111)		::Array< int > _g3 = ::Array_obj< int >::__new(0);
HXDLIN( 111)		{
HXLINE( 111)			int _g4 = 0;
HXDLIN( 111)			int _g5 = threadCounts;
HXDLIN( 111)			while((_g4 < _g5)){
HXLINE( 111)				_g4 = (_g4 + 1);
HXDLIN( 111)				int i1 = (_g4 - 1);
HXDLIN( 111)				_g3->push(i1);
            			}
            		}
HXDLIN( 111)		::Array< int > pp = _g3;
HXLINE( 113)		 ::sys::thread::Mutex mute =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
HXLINE( 114)		{
HXLINE( 114)			int _g6 = 0;
HXDLIN( 114)			int _g7 = threadCounts;
HXDLIN( 114)			while((_g6 < _g7)){
            				HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_1,::Array< int >,pp,int,totals,int,eachCount,::Array< int >,index,int,i2,::Array< ::Dynamic>,result) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_115_genMulThread)
HXLINE( 116)					int i3 = 0;
HXLINE( 118)					i3 = ( (int)(pp->shift()) );
HXLINE( 120)					::haxe::Log_obj::trace((((HX_("i2=",74,d8,4f,00) + i2) + HX_(" i=",d4,a3,18,00)) + i3),hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),120,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
HXLINE( 121)					 ::haxe::io::Bytes v = ::haxe::io::Bytes_obj::alloc(322560);
HXDLIN( 121)					::Array< ::Dynamic> this5 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN( 121)					::Array< ::Dynamic> this6 = this5;
HXDLIN( 121)					::Array< ::Dynamic> ret2 = this6;
HXDLIN( 121)					ret2->__unsafe_set(0,v);
HXDLIN( 121)					::Array< ::Dynamic> r = ret2;
HXLINE( 123)					 ::haxe::io::Bytes itemBytes = ::haxe::io::Bytes_obj::alloc(8);
HXLINE( 124)					int from = (i3 * eachCount);
HXLINE( 125)					int to = ((i3 + 1) * eachCount);
HXLINE( 126)					{
HXLINE( 126)						int _g61 = from;
HXDLIN( 126)						int _g71 = to;
HXDLIN( 126)						while((_g61 < _g71)){
            							HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,index) HXARGC(1)
            							void _hx_run( ::haxe::io::Bytes d){
            								HX_GC_STACKFRAME(&_hx_pos_7eed2e78c5ea9145_135_genMulThread)
HXLINE( 135)								index[0]++;
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 126)							_g61 = (_g61 + 1);
HXDLIN( 126)							int k1 = (_g61 - 1);
HXLINE( 127)							int currentIndex = k1;
HXLINE( 129)							::Array< int > item = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->__get(currentIndex).StaticCast< ::Array< int > >();
HXLINE( 131)							{
HXLINE( 131)								int _g62 = 0;
HXDLIN( 131)								int _g72 = item->length;
HXDLIN( 131)								while((_g62 < _g72)){
HXLINE( 131)									_g62 = (_g62 + 1);
HXDLIN( 131)									int j = (_g62 - 1);
HXLINE( 132)									itemBytes->b[j] = ( (unsigned char)(item->__get(j)) );
            								}
            							}
HXLINE( 134)							 ::PermutationBit_obj::__alloc( HX_CTX ,itemBytes, ::Dynamic(new _hx_Closure_0(index)),r);
HXLINE( 142)							if ((hx::Mod(index->__get(0),1000) == 0)) {
HXLINE( 143)								::haxe::Log_obj::trace(index->__get(0),hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),143,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
            							}
HXLINE( 146)							if ((index->__get(0) == totals)) {
HXLINE( 147)								::haxe::Log_obj::trace(HX_W(u"\u606d\u559c\u4f60\uff0c\u5b8c\u6210\u4e86",23f4,56b7),hx::SourceInfo(HX_("src/gen/GenKLSFBytes.hx",8d,cb,8d,03),147,HX_("gen.GenKLSFBytes",85,0b,78,5f),HX_("genMulThread",3e,b3,cb,d0)));
            							}
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 114)				_g6 = (_g6 + 1);
HXDLIN( 114)				int i2 = (_g6 - 1);
HXLINE( 115)				::haxe::MainLoop_obj::addThread( ::Dynamic(new _hx_Closure_1(pp,totals,eachCount,index,i2,result)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GenKLSFBytes_obj,genMulThread,(void))


GenKLSFBytes_obj::GenKLSFBytes_obj()
{
}

bool GenKLSFBytes_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"main2") ) { outValue = main2_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"genMulThread") ) { outValue = genMulThread_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *GenKLSFBytes_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GenKLSFBytes_obj_sStaticStorageInfo = 0;
#endif

hx::Class GenKLSFBytes_obj::__mClass;

static ::String GenKLSFBytes_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	HX_("main2",d9,f9,1a,03),
	HX_("genMulThread",3e,b3,cb,d0),
	::String(null())
};

void GenKLSFBytes_obj::__register()
{
	GenKLSFBytes_obj _hx_dummy;
	GenKLSFBytes_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("gen.GenKLSFBytes",85,0b,78,5f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GenKLSFBytes_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GenKLSFBytes_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GenKLSFBytes_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GenKLSFBytes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GenKLSFBytes_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gen
