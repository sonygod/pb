// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_Permutation
#include <Permutation.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fdce4ab2ba739b62_6_new,"Permutation","new",0x2fb168d8,"Permutation.new","Permutation.hx",6,0xaa1d7998)
HX_LOCAL_STACK_FRAME(_hx_pos_fdce4ab2ba739b62_28_gen,"Permutation","gen",0x2fac1908,"Permutation.gen","Permutation.hx",28,0xaa1d7998)
HX_LOCAL_STACK_FRAME(_hx_pos_fdce4ab2ba739b62_42_copyBytes,"Permutation","copyBytes",0x13426eee,"Permutation.copyBytes","Permutation.hx",42,0xaa1d7998)
HX_LOCAL_STACK_FRAME(_hx_pos_fdce4ab2ba739b62_50_heapPermutation,"Permutation","heapPermutation",0xc05517b2,"Permutation.heapPermutation","Permutation.hx",50,0xaa1d7998)
HX_LOCAL_STACK_FRAME(_hx_pos_fdce4ab2ba739b62_87_computeAllChoices,"Permutation","computeAllChoices",0x6df71ba0,"Permutation.computeAllChoices","Permutation.hx",87,0xaa1d7998)

void Permutation_obj::__construct(::Array< int > arr, ::Dynamic callBack,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_fdce4ab2ba739b62_6_new)
HXLINE(   9)		this->total = 1;
HXLINE(   7)		this->result = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  14)		int max = arr->length;
HXLINE(  15)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  15)		{
HXLINE(  15)			int _g1 = 0;
HXDLIN(  15)			int _g2 = max;
HXDLIN(  15)			while((_g1 < _g2)){
HXLINE(  15)				_g1 = (_g1 + 1);
HXDLIN(  15)				int ii = (_g1 - 1);
HXDLIN(  15)				_g->push((ii + 1));
            			}
            		}
HXDLIN(  15)		::Array< int > arr1 = _g;
HXLINE(  16)		int i = (arr1->length - 1);
HXLINE(  19)		while((i > 0)){
HXLINE(  20)			int v = arr1->__get(i);
HXLINE(  21)			 ::Permutation _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  21)			_hx_tmp->total = (_hx_tmp->total * v);
HXLINE(  22)			i = (i - 1);
            		}
HXLINE(  25)		::Permutation_obj::heapPermutation(arr1,arr1->length,this->total,callBack,result);
            	}

Dynamic Permutation_obj::__CreateEmpty() { return new Permutation_obj; }

void *Permutation_obj::_hx_vtable = 0;

Dynamic Permutation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Permutation_obj > _hx_result = new Permutation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Permutation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53fc011e;
}

void Permutation_obj::gen(::Array< int > arr, ::Dynamic callBack,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_fdce4ab2ba739b62_28_gen)
HXLINE(  29)		int i = arr->length;
HXLINE(  30)		int total = 1;
HXLINE(  31)		while((i > 0)){
HXLINE(  32)			total = (total * i);
HXLINE(  33)			i = (i - 1);
            		}
HXLINE(  36)		::Permutation_obj::heapPermutation(arr,arr->length,total,callBack,result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Permutation_obj,gen,(void))

 ::haxe::io::Bytes Permutation_obj::copyBytes( ::haxe::io::Bytes b){
            	HX_STACKFRAME(&_hx_pos_fdce4ab2ba739b62_42_copyBytes)
HXLINE(  44)		 ::haxe::io::Bytes a = ::haxe::io::Bytes_obj::alloc(b->length);
HXLINE(  45)		a->blit(0,b,0,b->length);
HXLINE(  47)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Permutation_obj,copyBytes,return )

void Permutation_obj::heapPermutation(::Array< int > a,int size,int total, ::Dynamic callBack,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_fdce4ab2ba739b62_50_heapPermutation)
HXLINE(  51)		if ((size == 1)) {
HXLINE(  53)			::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) );
HXDLIN(  53)			_hx_tmp->push(a->copy());
HXLINE(  54)			if ((( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->length == total)) {
HXLINE(  55)				callBack(( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) ));
            			}
            		}
HXLINE(  59)		{
HXLINE(  59)			int _g = 0;
HXDLIN(  59)			int _g1 = size;
HXDLIN(  59)			while((_g < _g1)){
HXLINE(  59)				_g = (_g + 1);
HXDLIN(  59)				int i = (_g - 1);
HXLINE(  60)				::Permutation_obj::heapPermutation(a,(size - 1),total,callBack,result);
HXLINE(  63)				if (((size & 1) == 1)) {
HXLINE(  64)					int temp = a->__get(0);
HXLINE(  65)					a[0] = a->__get((size - 1));
HXLINE(  66)					a[(size - 1)] = temp;
            				}
            				else {
HXLINE(  68)					int temp1 = a->__get(i);
HXLINE(  69)					a[i] = a->__get((size - 1));
HXLINE(  70)					a[(size - 1)] = temp1;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Permutation_obj,heapPermutation,(void))

void Permutation_obj::computeAllChoices(::Array< ::Dynamic> data,int n,int outLen,int startIndex,int m,::Array< int > arr,int arrIndex,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_fdce4ab2ba739b62_87_computeAllChoices)
HXLINE(  88)		if ((m == 0)) {
HXLINE(  89)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  89)			::String _hx_tmp1 = (HX_("finish",53,40,7f,86) + ::Std_obj::string(arr));
HXDLIN(  89)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/Permutation.hx",a3,87,67,9f),89,HX_("Permutation",e6,5c,6e,f6),HX_("computeAllChoices",28,a1,0c,b9)));
HXLINE(  91)			( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->push(arr);
HXLINE(  93)			return;
            		}
HXLINE(  96)		int endIndex = (n - m);
HXLINE(  99)		int i = startIndex;
HXLINE( 101)		while((i <= endIndex)){
HXLINE( 102)			arr[arrIndex] = ( (::Array< int >)(_hx_array_unsafe_get(data,0)) )->__get(i);
HXLINE( 103)			::Permutation_obj::computeAllChoices(data,n,outLen,(i + 1),(m - 1),arr,(arrIndex + 1),result);
HXLINE( 105)			i = (i + 1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Permutation_obj,computeAllChoices,(void))


Permutation_obj::Permutation_obj()
{
}

void Permutation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Permutation);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(total,"total");
	HX_MARK_MEMBER_NAME(callBack,"callBack");
	HX_MARK_END_CLASS();
}

void Permutation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(total,"total");
	HX_VISIT_MEMBER_NAME(callBack,"callBack");
}

hx::Val Permutation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { return hx::Val( total ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callBack") ) { return hx::Val( callBack ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Permutation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gen") ) { outValue = gen_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyBytes") ) { outValue = copyBytes_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"heapPermutation") ) { outValue = heapPermutation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeAllChoices") ) { outValue = computeAllChoices_dyn(); return true; }
	}
	return false;
}

hx::Val Permutation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { total=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callBack") ) { callBack=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Permutation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("result",dd,68,84,08));
	outFields->push(HX_("total",c4,53,32,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Permutation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Permutation_obj,result),HX_("result",dd,68,84,08)},
	{hx::fsInt,(int)offsetof(Permutation_obj,total),HX_("total",c4,53,32,14)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Permutation_obj,callBack),HX_("callBack",e5,c5,df,69)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Permutation_obj_sStaticStorageInfo = 0;
#endif

static ::String Permutation_obj_sMemberFields[] = {
	HX_("result",dd,68,84,08),
	HX_("total",c4,53,32,14),
	HX_("callBack",e5,c5,df,69),
	::String(null()) };

hx::Class Permutation_obj::__mClass;

static ::String Permutation_obj_sStaticFields[] = {
	HX_("gen",90,80,4e,00),
	HX_("copyBytes",76,2c,93,43),
	HX_("heapPermutation",3a,ab,b8,7c),
	HX_("computeAllChoices",28,a1,0c,b9),
	::String(null())
};

void Permutation_obj::__register()
{
	Permutation_obj _hx_dummy;
	Permutation_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Permutation",e6,5c,6e,f6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Permutation_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Permutation_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Permutation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Permutation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Permutation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Permutation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

