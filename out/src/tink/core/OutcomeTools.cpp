// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core_OutcomeTools
#include <tink/core/OutcomeTools.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_core__Outcome_OutcomeMapper_Impl_
#include <tink/core/_Outcome/OutcomeMapper_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_18_sure,"tink.core.OutcomeTools","sure",0x05340847,"tink.core.OutcomeTools.sure","tink/core/Outcome.hx",18,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_33_toOption,"tink.core.OutcomeTools","toOption",0xa8e46fc2,"tink.core.OutcomeTools.toOption","tink/core/Outcome.hx",33,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_43_toOutcome,"tink.core.OutcomeTools","toOutcome",0x1acedfa5,"tink.core.OutcomeTools.toOutcome","tink/core/Outcome.hx",43,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_55_orNull,"tink.core.OutcomeTools","orNull",0x551b8d3c,"tink.core.OutcomeTools.orNull","tink/core/Outcome.hx",55,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_65_orUse,"tink.core.OutcomeTools","orUse",0x38a74b32,"tink.core.OutcomeTools.orUse","tink/core/Outcome.hx",65,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_75_orTry,"tink.core.OutcomeTools","orTry",0x38a68826,"tink.core.OutcomeTools.orTry","tink/core/Outcome.hx",75,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_84_equals,"tink.core.OutcomeTools","equals",0xdbdb8231,"tink.core.OutcomeTools.equals","tink/core/Outcome.hx",84,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_94_map,"tink.core.OutcomeTools","map",0x09306b6a,"tink.core.OutcomeTools.map","tink/core/Outcome.hx",94,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_106_isSuccess,"tink.core.OutcomeTools","isSuccess",0xcbb79247,"tink.core.OutcomeTools.isSuccess","tink/core/Outcome.hx",106,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_117_flatMap,"tink.core.OutcomeTools","flatMap",0x3676f031,"tink.core.OutcomeTools.flatMap","tink/core/Outcome.hx",117,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_125_swap,"tink.core.OutcomeTools","swap",0x05357e05,"tink.core.OutcomeTools.swap","tink/core/Outcome.hx",125,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_138_attempt,"tink.core.OutcomeTools","attempt",0x8031a8db,"tink.core.OutcomeTools.attempt","tink/core/Outcome.hx",138,0x825b551f)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f72dfe848dfefe_143_flatten,"tink.core.OutcomeTools","flatten",0x36948b92,"tink.core.OutcomeTools.flatten","tink/core/Outcome.hx",143,0x825b551f)
namespace tink{
namespace core{

void OutcomeTools_obj::__construct() { }

Dynamic OutcomeTools_obj::__CreateEmpty() { return new OutcomeTools_obj; }

void *OutcomeTools_obj::_hx_vtable = 0;

Dynamic OutcomeTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OutcomeTools_obj > _hx_result = new OutcomeTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OutcomeTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52fdfdbe;
}

 ::Dynamic OutcomeTools_obj::sure( ::tink::core::Outcome outcome){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_18_sure)
HXDLIN(  18)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  19)				 ::Dynamic data = outcome->_hx_getObject(0);
HXLINE(  20)				return data;
            			}
            			break;
            			case (int)1: {
HXLINE(  21)				 ::Dynamic failure = outcome->_hx_getObject(0);
HXLINE(  22)				 ::tink::core::TypedError _g = ::tink::core::TypedError_obj::asError(failure);
HXLINE(  23)				if (hx::IsNull( _g )) {
HXLINE(  23)					HX_STACK_DO_THROW(failure);
            				}
            				else {
HXLINE(  24)					 ::tink::core::TypedError e = _g;
HXDLIN(  24)					return e->throwSelf();
            				}
            			}
            			break;
            		}
HXLINE(  18)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OutcomeTools_obj,sure,return )

 ::haxe::ds::Option OutcomeTools_obj::toOption( ::tink::core::Outcome outcome){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_33_toOption)
HXDLIN(  33)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  34)				 ::Dynamic data = outcome->_hx_getObject(0);
HXDLIN(  34)				return ::haxe::ds::Option_obj::Some(data);
            			}
            			break;
            			case (int)1: {
HXLINE(  35)				 ::Dynamic _g1 = outcome->_hx_getObject(0);
HXDLIN(  35)				return ::haxe::ds::Option_obj::None_dyn();
            			}
            			break;
            		}
HXLINE(  33)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OutcomeTools_obj,toOption,return )

 ::tink::core::Outcome OutcomeTools_obj::toOutcome( ::haxe::ds::Option option, ::Dynamic pos){
            	HX_GC_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_43_toOutcome)
HXDLIN(  43)		switch((int)(option->_hx_getIndex())){
            			case (int)0: {
HXLINE(  44)				 ::Dynamic value = option->_hx_getObject(0);
HXLINE(  45)				return ::tink::core::Outcome_obj::Success(value);
            			}
            			break;
            			case (int)1: {
HXLINE(  47)				return ::tink::core::Outcome_obj::Failure( ::tink::core::TypedError_obj::__alloc( HX_CTX ,404,( (::String)((((HX_("Some value expected but none found in ",c1,4d,fa,88) + pos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) + HX_("@line ",6c,f5,d8,0b)) + pos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic))) ),hx::SourceInfo(HX_("tink/core/Outcome.hx",1f,55,5b,82),47,HX_("tink.core.OutcomeTools",3c,c2,61,dd),HX_("toOutcome",57,f0,63,0b))));
            			}
            			break;
            		}
HXLINE(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,toOutcome,return )

 ::Dynamic OutcomeTools_obj::orNull( ::tink::core::Outcome outcome){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_55_orNull)
HXDLIN(  55)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  56)				 ::Dynamic data = outcome->_hx_getObject(0);
HXDLIN(  56)				return data;
            			}
            			break;
            			case (int)1: {
HXLINE(  57)				 ::Dynamic _g1 = outcome->_hx_getObject(0);
HXDLIN(  57)				return null();
            			}
            			break;
            		}
HXLINE(  55)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OutcomeTools_obj,orNull,return )

 ::Dynamic OutcomeTools_obj::orUse( ::tink::core::Outcome outcome,::Dynamic fallback){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_65_orUse)
HXDLIN(  65)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  66)				 ::Dynamic data = outcome->_hx_getObject(0);
HXDLIN(  66)				return data;
            			}
            			break;
            			case (int)1: {
HXLINE(  67)				 ::Dynamic _g1 = outcome->_hx_getObject(0);
HXDLIN(  67)				return ::tink::core::_Lazy::LazyObject_obj::get(fallback);
            			}
            			break;
            		}
HXLINE(  65)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,orUse,return )

 ::tink::core::Outcome OutcomeTools_obj::orTry( ::tink::core::Outcome outcome,::Dynamic fallback){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_75_orTry)
HXDLIN(  75)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  76)				 ::Dynamic _g = outcome->_hx_getObject(0);
HXDLIN(  76)				return outcome;
            			}
            			break;
            			case (int)1: {
HXLINE(  77)				 ::Dynamic _g1 = outcome->_hx_getObject(0);
HXDLIN(  77)				return ::tink::core::_Lazy::LazyObject_obj::get(fallback);
            			}
            			break;
            		}
HXLINE(  75)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,orTry,return )

bool OutcomeTools_obj::equals( ::tink::core::Outcome outcome, ::Dynamic to){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_84_equals)
HXDLIN(  84)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  85)				 ::Dynamic data = outcome->_hx_getObject(0);
HXDLIN(  85)				return hx::IsEq( data,to );
            			}
            			break;
            			case (int)1: {
HXLINE(  86)				 ::Dynamic _g1 = outcome->_hx_getObject(0);
HXDLIN(  86)				return false;
            			}
            			break;
            		}
HXLINE(  84)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,equals,return )

 ::tink::core::Outcome OutcomeTools_obj::map( ::tink::core::Outcome outcome, ::Dynamic transform){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_94_map)
HXDLIN(  94)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE(  95)				 ::Dynamic a = outcome->_hx_getObject(0);
HXLINE(  96)				return ::tink::core::Outcome_obj::Success(transform(a));
            			}
            			break;
            			case (int)1: {
HXLINE(  97)				 ::Dynamic f = outcome->_hx_getObject(0);
HXLINE(  98)				return ::tink::core::Outcome_obj::Failure(f);
            			}
            			break;
            		}
HXLINE(  94)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,map,return )

bool OutcomeTools_obj::isSuccess( ::tink::core::Outcome outcome){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_106_isSuccess)
HXDLIN( 106)		if ((outcome->_hx_getIndex() == 0)) {
HXLINE( 107)			 ::Dynamic _g = outcome->_hx_getObject(0);
HXDLIN( 107)			return true;
            		}
            		else {
HXLINE( 108)			return false;
            		}
HXLINE( 106)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OutcomeTools_obj,isSuccess,return )

 ::tink::core::Outcome OutcomeTools_obj::flatMap( ::tink::core::Outcome o, ::Dynamic mapper){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_117_flatMap)
HXDLIN( 117)		return ::tink::core::_Outcome::OutcomeMapper_Impl__obj::apply(mapper,o);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,flatMap,return )

 ::tink::core::Outcome OutcomeTools_obj::swap( ::tink::core::Outcome outcome, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_125_swap)
HXDLIN( 125)		switch((int)(outcome->_hx_getIndex())){
            			case (int)0: {
HXLINE( 126)				 ::Dynamic a = outcome->_hx_getObject(0);
HXLINE( 127)				return ::tink::core::Outcome_obj::Success(v);
            			}
            			break;
            			case (int)1: {
HXLINE( 128)				 ::Dynamic f = outcome->_hx_getObject(0);
HXLINE( 129)				return ::tink::core::Outcome_obj::Failure(f);
            			}
            			break;
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,swap,return )

 ::tink::core::Outcome OutcomeTools_obj::attempt( ::Dynamic f, ::Dynamic report){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_138_attempt)
HXDLIN( 138)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXDLIN( 138)			return ::tink::core::Outcome_obj::Success(f());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 140)				return ::tink::core::Outcome_obj::Failure(report(e));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 138)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OutcomeTools_obj,attempt,return )

 ::tink::core::Outcome OutcomeTools_obj::flatten( ::tink::core::Outcome o){
            	HX_STACKFRAME(&_hx_pos_a4f72dfe848dfefe_143_flatten)
HXDLIN( 143)		switch((int)(o->_hx_getIndex())){
            			case (int)0: {
HXLINE( 145)				 ::tink::core::Outcome _g = o->_hx_getObject(0);
HXDLIN( 145)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 144)						 ::Dynamic d = _g->_hx_getObject(0);
HXDLIN( 144)						return ::tink::core::Outcome_obj::Success(d);
            					}
            					break;
            					case (int)1: {
HXLINE( 145)						 ::Dynamic f = _g->_hx_getObject(0);
HXDLIN( 145)						return ::tink::core::Outcome_obj::Failure(f);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 145)				 ::Dynamic f1 = o->_hx_getObject(0);
HXDLIN( 145)				return ::tink::core::Outcome_obj::Failure(f1);
            			}
            			break;
            		}
HXLINE( 143)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OutcomeTools_obj,flatten,return )


OutcomeTools_obj::OutcomeTools_obj()
{
}

bool OutcomeTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sure") ) { outValue = sure_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"swap") ) { outValue = swap_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"orUse") ) { outValue = orUse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"orTry") ) { outValue = orTry_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"orNull") ) { outValue = orNull_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"attempt") ) { outValue = attempt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toOption") ) { outValue = toOption_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toOutcome") ) { outValue = toOutcome_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isSuccess") ) { outValue = isSuccess_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *OutcomeTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OutcomeTools_obj_sStaticStorageInfo = 0;
#endif

hx::Class OutcomeTools_obj::__mClass;

static ::String OutcomeTools_obj_sStaticFields[] = {
	HX_("sure",d5,b4,5c,4c),
	HX_("toOption",50,7b,b9,52),
	HX_("toOutcome",57,f0,63,0b),
	HX_("orNull",4a,f9,32,39),
	HX_("orUse",e4,9a,15,35),
	HX_("orTry",d8,d7,14,35),
	HX_("equals",3f,ee,f2,bf),
	HX_("map",9c,0a,53,00),
	HX_("isSuccess",f9,a2,4c,bc),
	HX_("flatMap",63,10,de,e6),
	HX_("swap",93,2a,5e,4c),
	HX_("attempt",0d,c9,98,30),
	HX_("flatten",c4,ab,fb,e6),
	::String(null())
};

void OutcomeTools_obj::__register()
{
	OutcomeTools_obj _hx_dummy;
	OutcomeTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core.OutcomeTools",3c,c2,61,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OutcomeTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OutcomeTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< OutcomeTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OutcomeTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OutcomeTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
