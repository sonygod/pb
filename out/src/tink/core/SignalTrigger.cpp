// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_SignalObject
#include <tink/core/SignalObject.h>
#endif
#ifndef INCLUDED_tink_core_SignalTrigger
#include <tink/core/SignalTrigger.h>
#endif
#ifndef INCLUDED_tink_core__Callback_CallbackList_Impl_
#include <tink/core/_Callback/CallbackList_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Callback_ListCell
#include <tink/core/_Callback/ListCell.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f72036d15d783c7_188_new,"tink.core.SignalTrigger","new",0x449375af,"tink.core.SignalTrigger.new","tink/core/Signal.hx",188,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_9f72036d15d783c7_195_trigger,"tink.core.SignalTrigger","trigger",0x8ffd4e07,"tink.core.SignalTrigger.trigger","tink/core/Signal.hx",195,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_9f72036d15d783c7_201_getLength,"tink.core.SignalTrigger","getLength",0xc38728ab,"tink.core.SignalTrigger.getLength","tink/core/Signal.hx",201,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_9f72036d15d783c7_204_handle,"tink.core.SignalTrigger","handle",0xa98ad9b9,"tink.core.SignalTrigger.handle","tink/core/Signal.hx",204,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_9f72036d15d783c7_210_clear,"tink.core.SignalTrigger","clear",0xd7ca489c,"tink.core.SignalTrigger.clear","tink/core/Signal.hx",210,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_9f72036d15d783c7_213_asSignal,"tink.core.SignalTrigger","asSignal",0xb377f54b,"tink.core.SignalTrigger.asSignal","tink/core/Signal.hx",213,0x5ae99903)
namespace tink{
namespace core{

void SignalTrigger_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_188_new)
HXDLIN( 188)		this->handlers = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic SignalTrigger_obj::__CreateEmpty() { return new SignalTrigger_obj; }

void *SignalTrigger_obj::_hx_vtable = 0;

Dynamic SignalTrigger_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SignalTrigger_obj > _hx_result = new SignalTrigger_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SignalTrigger_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04dd487b;
}

static ::tink::core::SignalObject_obj _hx_tink_core_SignalTrigger__hx_tink_core_SignalObject= {
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::SignalTrigger_obj::handle,
};

void *SignalTrigger_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x0b67d878: return &_hx_tink_core_SignalTrigger__hx_tink_core_SignalObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void SignalTrigger_obj::trigger( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_195_trigger)
HXDLIN( 195)		::tink::core::_Callback::CallbackList_Impl__obj::invoke(this->handlers,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SignalTrigger_obj,trigger,(void))

int SignalTrigger_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_201_getLength)
HXDLIN( 201)		return this->handlers->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SignalTrigger_obj,getLength,return )

::Dynamic SignalTrigger_obj::handle( ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_204_handle)
HXDLIN( 204)		return ::tink::core::_Callback::CallbackList_Impl__obj::add(this->handlers,cb);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SignalTrigger_obj,handle,return )

void SignalTrigger_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_210_clear)
HXDLIN( 210)		::tink::core::_Callback::CallbackList_Impl__obj::clear(this->handlers);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SignalTrigger_obj,clear,(void))

::Dynamic SignalTrigger_obj::asSignal(){
            	HX_STACKFRAME(&_hx_pos_9f72036d15d783c7_213_asSignal)
HXDLIN( 213)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SignalTrigger_obj,asSignal,return )


hx::ObjectPtr< SignalTrigger_obj > SignalTrigger_obj::__new() {
	hx::ObjectPtr< SignalTrigger_obj > __this = new SignalTrigger_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SignalTrigger_obj > SignalTrigger_obj::__alloc(hx::Ctx *_hx_ctx) {
	SignalTrigger_obj *__this = (SignalTrigger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SignalTrigger_obj), true, "tink.core.SignalTrigger"));
	*(void **)__this = SignalTrigger_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SignalTrigger_obj::SignalTrigger_obj()
{
}

void SignalTrigger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SignalTrigger);
	HX_MARK_MEMBER_NAME(handlers,"handlers");
	HX_MARK_END_CLASS();
}

void SignalTrigger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handlers,"handlers");
}

hx::Val SignalTrigger_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"trigger") ) { return hx::Val( trigger_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { return hx::Val( handlers ); }
		if (HX_FIELD_EQ(inName,"asSignal") ) { return hx::Val( asSignal_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SignalTrigger_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SignalTrigger_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("handlers",69,21,24,d5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SignalTrigger_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SignalTrigger_obj,handlers),HX_("handlers",69,21,24,d5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SignalTrigger_obj_sStaticStorageInfo = 0;
#endif

static ::String SignalTrigger_obj_sMemberFields[] = {
	HX_("handlers",69,21,24,d5),
	HX_("trigger",38,55,df,25),
	HX_("getLength",1c,1e,5e,1b),
	HX_("handle",a8,83,fd,b7),
	HX_("clear",8d,71,5b,48),
	HX_("asSignal",fa,38,5c,43),
	::String(null()) };

hx::Class SignalTrigger_obj::__mClass;

void SignalTrigger_obj::__register()
{
	SignalTrigger_obj _hx_dummy;
	SignalTrigger_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core.SignalTrigger",3d,72,c5,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SignalTrigger_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SignalTrigger_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SignalTrigger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SignalTrigger_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
