// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_SignalObject
#include <tink/core/SignalObject.h>
#endif
#ifndef INCLUDED_tink_core__Signal_SimpleSignal
#include <tink/core/_Signal/SimpleSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_613a9d2d96bc347a_150_new,"tink.core._Signal.SimpleSignal","new",0x391504e6,"tink.core._Signal.SimpleSignal.new","tink/core/Signal.hx",150,0x5ae99903)
HX_LOCAL_STACK_FRAME(_hx_pos_613a9d2d96bc347a_151_handle,"tink.core._Signal.SimpleSignal","handle",0x658766e2,"tink.core._Signal.SimpleSignal.handle","tink/core/Signal.hx",151,0x5ae99903)
namespace tink{
namespace core{
namespace _Signal{

void SimpleSignal_obj::__construct( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_613a9d2d96bc347a_150_new)
HXDLIN( 150)		this->f = f;
            	}

Dynamic SimpleSignal_obj::__CreateEmpty() { return new SimpleSignal_obj; }

void *SimpleSignal_obj::_hx_vtable = 0;

Dynamic SimpleSignal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleSignal_obj > _hx_result = new SimpleSignal_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SimpleSignal_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30db2a50;
}

static ::tink::core::SignalObject_obj _hx_tink_core__Signal_SimpleSignal__hx_tink_core_SignalObject= {
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Signal::SimpleSignal_obj::handle,
};

void *SimpleSignal_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x0b67d878: return &_hx_tink_core__Signal_SimpleSignal__hx_tink_core_SignalObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic SimpleSignal_obj::handle( ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_613a9d2d96bc347a_151_handle)
HXDLIN( 151)		return this->f(cb);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleSignal_obj,handle,return )


hx::ObjectPtr< SimpleSignal_obj > SimpleSignal_obj::__new( ::Dynamic f) {
	hx::ObjectPtr< SimpleSignal_obj > __this = new SimpleSignal_obj();
	__this->__construct(f);
	return __this;
}

hx::ObjectPtr< SimpleSignal_obj > SimpleSignal_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic f) {
	SimpleSignal_obj *__this = (SimpleSignal_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleSignal_obj), true, "tink.core._Signal.SimpleSignal"));
	*(void **)__this = SimpleSignal_obj::_hx_vtable;
	__this->__construct(f);
	return __this;
}

SimpleSignal_obj::SimpleSignal_obj()
{
}

void SimpleSignal_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleSignal);
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_END_CLASS();
}

void SimpleSignal_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(f,"f");
}

hx::Val SimpleSignal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SimpleSignal_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleSignal_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SimpleSignal_obj,f),HX_("f",66,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SimpleSignal_obj_sStaticStorageInfo = 0;
#endif

static ::String SimpleSignal_obj_sMemberFields[] = {
	HX_("f",66,00,00,00),
	HX_("handle",a8,83,fd,b7),
	::String(null()) };

hx::Class SimpleSignal_obj::__mClass;

void SimpleSignal_obj::__register()
{
	SimpleSignal_obj _hx_dummy;
	SimpleSignal_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Signal.SimpleSignal",f4,59,73,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleSignal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleSignal_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleSignal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleSignal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Signal
