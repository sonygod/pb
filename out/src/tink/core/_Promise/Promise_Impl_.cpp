// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_MPair
#include <tink/core/MPair.h>
#endif
#ifndef INCLUDED_tink_core_Noise
#include <tink/core/Noise.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core_OutcomeTools
#include <tink/core/OutcomeTools.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Callback_CallbackLink_Impl_
#include <tink/core/_Callback/CallbackLink_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_SyncFuture
#include <tink/core/_Future/SyncFuture.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_core__Promise_Promise_Impl_
#include <tink/core/_Promise/Promise_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_18__new,"tink.core._Promise.Promise_Impl_","_new",0x1816e7f3,"tink.core._Promise.Promise_Impl_._new","tink/core/Promise.hx",18,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_16__new,"tink.core._Promise.Promise_Impl_","_new",0x1816e7f3,"tink.core._Promise.Promise_Impl_._new","tink/core/Promise.hx",16,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_23_eager,"tink.core._Promise.Promise_Impl_","eager",0x67c536e6,"tink.core._Promise.Promise_Impl_.eager","tink/core/Promise.hx",23,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_26_map,"tink.core._Promise.Promise_Impl_","map",0x4f5c304a,"tink.core._Promise.Promise_Impl_.map","tink/core/Promise.hx",26,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_29_flatMap,"tink.core._Promise.Promise_Impl_","flatMap",0xf196a511,"tink.core._Promise.Promise_Impl_.flatMap","tink/core/Promise.hx",29,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_32_tryRecover,"tink.core._Promise.Promise_Impl_","tryRecover",0xd7458abb,"tink.core._Promise.Promise_Impl_.tryRecover","tink/core/Promise.hx",32,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_38_recover,"tink.core._Promise.Promise_Impl_","recover",0x3bb6e752,"tink.core._Promise.Promise_Impl_.recover","tink/core/Promise.hx",38,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_44_mapError,"tink.core._Promise.Promise_Impl_","mapError",0x4135bf1e,"tink.core._Promise.Promise_Impl_.mapError","tink/core/Promise.hx",44,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_50_handle,"tink.core._Promise.Promise_Impl_","handle",0x9c7c9eba,"tink.core._Promise.Promise_Impl_.handle","tink/core/Promise.hx",50,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_53_noise,"tink.core._Promise.Promise_Impl_","noise",0x9fa2fcc8,"tink.core._Promise.Promise_Impl_.noise","tink/core/Promise.hx",53,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_56_isSuccess,"tink.core._Promise.Promise_Impl_","isSuccess",0x55d63f27,"tink.core._Promise.Promise_Impl_.isSuccess","tink/core/Promise.hx",56,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_59_next,"tink.core._Promise.Promise_Impl_","next",0x21fa5785,"tink.core._Promise.Promise_Impl_.next","tink/core/Promise.hx",59,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_65_swap,"tink.core._Promise.Promise_Impl_","swap",0x2555fd25,"tink.core._Promise.Promise_Impl_.swap","tink/core/Promise.hx",65,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_68_swapError,"tink.core._Promise.Promise_Impl_","swapError",0x82607863,"tink.core._Promise.Promise_Impl_.swapError","tink/core/Promise.hx",68,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_71_merge,"tink.core._Promise.Promise_Impl_","merge",0x05a70fe6,"tink.core._Promise.Promise_Impl_.merge","tink/core/Promise.hx",71,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_74_and,"tink.core._Promise.Promise_Impl_","and",0x4f532085,"tink.core._Promise.Promise_Impl_.and","tink/core/Promise.hx",74,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_98_iterate,"tink.core._Promise.Promise_Impl_","iterate",0xed890ea8,"tink.core._Promise.Promise_Impl_.iterate","tink/core/Promise.hx",98,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_99_iterate,"tink.core._Promise.Promise_Impl_","iterate",0xed890ea8,"tink.core._Promise.Promise_Impl_.iterate","tink/core/Promise.hx",99,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_101_iterate,"tink.core._Promise.Promise_Impl_","iterate",0xed890ea8,"tink.core._Promise.Promise_Impl_.iterate","tink/core/Promise.hx",101,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_95_iterate,"tink.core._Promise.Promise_Impl_","iterate",0xed890ea8,"tink.core._Promise.Promise_Impl_.iterate","tink/core/Promise.hx",95,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_155_retry,"tink.core._Promise.Promise_Impl_","retry",0xe6a98496,"tink.core._Promise.Promise_Impl_.retry","tink/core/Promise.hx",155,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_161_retry,"tink.core._Promise.Promise_Impl_","retry",0xe6a98496,"tink.core._Promise.Promise_Impl_.retry","tink/core/Promise.hx",161,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_160_retry,"tink.core._Promise.Promise_Impl_","retry",0xe6a98496,"tink.core._Promise.Promise_Impl_.retry","tink/core/Promise.hx",160,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_158_retry,"tink.core._Promise.Promise_Impl_","retry",0xe6a98496,"tink.core._Promise.Promise_Impl_.retry","tink/core/Promise.hx",158,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_154_retry,"tink.core._Promise.Promise_Impl_","retry",0xe6a98496,"tink.core._Promise.Promise_Impl_.retry","tink/core/Promise.hx",154,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_180_ofSpecific,"tink.core._Promise.Promise_Impl_","ofSpecific",0x9083d8fb,"tink.core._Promise.Promise_Impl_.ofSpecific","tink/core/Promise.hx",180,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_183_ofFuture,"tink.core._Promise.Promise_Impl_","ofFuture",0x5d195c4c,"tink.core._Promise.Promise_Impl_.ofFuture","tink/core/Promise.hx",183,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_186_ofOutcome,"tink.core._Promise.Promise_Impl_","ofOutcome",0x83707c69,"tink.core._Promise.Promise_Impl_.ofOutcome","tink/core/Promise.hx",186,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_189_ofError,"tink.core._Promise.Promise_Impl_","ofError",0xe1451bdf,"tink.core._Promise.Promise_Impl_.ofError","tink/core/Promise.hx",189,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_192_ofData,"tink.core._Promise.Promise_Impl_","ofData",0x2e37d5f3,"tink.core._Promise.Promise_Impl_.ofData","tink/core/Promise.hx",192,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_195_lazy,"tink.core._Promise.Promise_Impl_","lazy",0x20a4e306,"tink.core._Promise.Promise_Impl_.lazy","tink/core/Promise.hx",195,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_197_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",197,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_210_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",210,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_216_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",216,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_225_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",225,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_235_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",235,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_233_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",233,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_200_inParallel,"tink.core._Promise.Promise_Impl_","inParallel",0x98cdbbde,"tink.core._Promise.Promise_Impl_.inParallel","tink/core/Promise.hx",200,0x59ef4bb6)
static const bool _hx_array_data_1351971c_55[] = {
	0,
};
static const int _hx_array_data_1351971c_56[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_255_inSequence,"tink.core._Promise.Promise_Impl_","inSequence",0x03c42f58,"tink.core._Promise.Promise_Impl_.inSequence","tink/core/Promise.hx",255,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_259_inSequence,"tink.core._Promise.Promise_Impl_","inSequence",0x03c42f58,"tink.core._Promise.Promise_Impl_.inSequence","tink/core/Promise.hx",259,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_258_inSequence,"tink.core._Promise.Promise_Impl_","inSequence",0x03c42f58,"tink.core._Promise.Promise_Impl_.inSequence","tink/core/Promise.hx",258,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_251_inSequence,"tink.core._Promise.Promise_Impl_","inSequence",0x03c42f58,"tink.core._Promise.Promise_Impl_.inSequence","tink/core/Promise.hx",251,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_283_cache,"tink.core._Promise.Promise_Impl_","cache",0x40f50770,"tink.core._Promise.Promise_Impl_.cache","tink/core/Promise.hx",283,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_270_cache,"tink.core._Promise.Promise_Impl_","cache",0x40f50770,"tink.core._Promise.Promise_Impl_.cache","tink/core/Promise.hx",270,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_275_cache,"tink.core._Promise.Promise_Impl_","cache",0x40f50770,"tink.core._Promise.Promise_Impl_.cache","tink/core/Promise.hx",275,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_274_cache,"tink.core._Promise.Promise_Impl_","cache",0x40f50770,"tink.core._Promise.Promise_Impl_.cache","tink/core/Promise.hx",274,0x59ef4bb6)
static const bool _hx_array_data_1351971c_65[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_268_cache,"tink.core._Promise.Promise_Impl_","cache",0x40f50770,"tink.core._Promise.Promise_Impl_.cache","tink/core/Promise.hx",268,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_293_lift,"tink.core._Promise.Promise_Impl_","lift",0x20aae39d,"tink.core._Promise.Promise_Impl_.lift","tink/core/Promise.hx",293,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_300_trigger,"tink.core._Promise.Promise_Impl_","trigger",0x3097e9e6,"tink.core._Promise.Promise_Impl_.trigger","tink/core/Promise.hx",300,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_304_resolve,"tink.core._Promise.Promise_Impl_","resolve",0x7218a79a,"tink.core._Promise.Promise_Impl_.resolve","tink/core/Promise.hx",304,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_308_reject,"tink.core._Promise.Promise_Impl_","reject",0xe7046c71,"tink.core._Promise.Promise_Impl_.reject","tink/core/Promise.hx",308,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_12_boot,"tink.core._Promise.Promise_Impl_","boot",0x1a1356c4,"tink.core._Promise.Promise_Impl_.boot","tink/core/Promise.hx",12,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_13_boot,"tink.core._Promise.Promise_Impl_","boot",0x1a1356c4,"tink.core._Promise.Promise_Impl_.boot","tink/core/Promise.hx",13,0x59ef4bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_113c0f6d76f4dafd_14_boot,"tink.core._Promise.Promise_Impl_","boot",0x1a1356c4,"tink.core._Promise.Promise_Impl_.boot","tink/core/Promise.hx",14,0x59ef4bb6)
namespace tink{
namespace core{
namespace _Promise{

void Promise_Impl__obj::__construct() { }

Dynamic Promise_Impl__obj::__CreateEmpty() { return new Promise_Impl__obj; }

void *Promise_Impl__obj::_hx_vtable = 0;

Dynamic Promise_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Promise_Impl__obj > _hx_result = new Promise_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Promise_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x433cbcae;
}

::Dynamic Promise_Impl__obj::_hx_NULL;

::Dynamic Promise_Impl__obj::NOISE;

::Dynamic Promise_Impl__obj::NEVER;

::Dynamic Promise_Impl__obj::_new( ::Dynamic f,hx::Null< bool >  __o_lazy){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,f) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,cb) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_18__new)
HXLINE(  18)				cb(::tink::core::Outcome_obj::Success(v));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,cb) HXARGC(1)
            			void _hx_run( ::tink::core::TypedError e){
            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_18__new)
HXLINE(  18)				cb(::tink::core::Outcome_obj::Failure(e));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_18__new)
HXLINE(  18)			f( ::Dynamic(new _hx_Closure_0(cb)), ::Dynamic(new _hx_Closure_1(cb)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		bool lazy = __o_lazy.Default(false);
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_16__new)
HXDLIN(  16)		::Dynamic this1 = ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_2(f)),lazy);
HXDLIN(  16)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,_new,return )

::Dynamic Promise_Impl__obj::eager(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_23_eager)
HXDLIN(  23)		return ::tink::core::_Future::FutureObject_obj::eager(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,eager,return )

::Dynamic Promise_Impl__obj::map(::Dynamic this1, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_26_map)
HXDLIN(  26)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(this1,f);
HXDLIN(  26)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,map,return )

::Dynamic Promise_Impl__obj::flatMap(::Dynamic this1, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_29_flatMap)
HXDLIN(  29)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1,f);
HXDLIN(  29)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,flatMap,return )

::Dynamic Promise_Impl__obj::tryRecover(::Dynamic this1, ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::Outcome o){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_32_tryRecover)
HXDLIN(  32)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE(  33)					 ::Dynamic d = o->_hx_getObject(0);
HXDLIN(  33)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,o));
            				}
            				break;
            				case (int)1: {
HXLINE(  34)					 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXDLIN(  34)					return f(e);
            				}
            				break;
            			}
HXLINE(  32)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_32_tryRecover)
HXDLIN(  32)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN(  32)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,tryRecover,return )

::Dynamic Promise_Impl__obj::recover(::Dynamic this1, ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::Outcome o){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_38_recover)
HXDLIN(  38)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE(  39)					 ::Dynamic d = o->_hx_getObject(0);
HXDLIN(  39)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,d));
            				}
            				break;
            				case (int)1: {
HXLINE(  40)					 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXDLIN(  40)					return f(e);
            				}
            				break;
            			}
HXLINE(  38)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_38_recover)
HXDLIN(  38)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN(  38)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,recover,return )

::Dynamic Promise_Impl__obj::mapError(::Dynamic this1, ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		 ::tink::core::Outcome _hx_run( ::tink::core::Outcome o){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_44_mapError)
HXDLIN(  44)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE(  45)					 ::Dynamic _g = o->_hx_getObject(0);
HXDLIN(  45)					return o;
            				}
            				break;
            				case (int)1: {
HXLINE(  46)					 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXDLIN(  46)					return ::tink::core::Outcome_obj::Failure(f(e));
            				}
            				break;
            			}
HXLINE(  44)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_44_mapError)
HXDLIN(  44)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(this1, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN(  44)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,mapError,return )

::Dynamic Promise_Impl__obj::handle(::Dynamic this1, ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_50_handle)
HXDLIN(  50)		return ::tink::core::_Future::FutureObject_obj::handle(this1,cb);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,handle,return )

::Dynamic Promise_Impl__obj::noise(::Dynamic this1){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic v){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_53_noise)
HXDLIN(  53)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(::tink::core::Noise_obj::Noise_dyn())));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_53_noise)
HXDLIN(  53)		return ::tink::core::_Promise::Promise_Impl__obj::next(this1, ::Dynamic(new _hx_Closure_0()),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,noise,return )

::Dynamic Promise_Impl__obj::isSuccess(::Dynamic this1){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run( ::tink::core::Outcome o){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_56_isSuccess)
HXDLIN(  56)			return ::tink::core::OutcomeTools_obj::isSuccess(o);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_56_isSuccess)
HXDLIN(  56)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(this1, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  56)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,isSuccess,return )

::Dynamic Promise_Impl__obj::next(::Dynamic this1, ::Dynamic f, ::Dynamic __o_gather){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::Outcome o){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_59_next)
HXDLIN(  59)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE(  60)					 ::Dynamic d = o->_hx_getObject(0);
HXDLIN(  60)					return f(d);
            				}
            				break;
            				case (int)1: {
HXLINE(  61)					 ::tink::core::TypedError f1 = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXDLIN(  61)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Failure(f1)));
            				}
            				break;
            			}
HXLINE(  59)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_59_next)
HXDLIN(  59)		 ::Dynamic gather1 = gather;
HXLINE(  50)		if (hx::IsNull( gather1 )) {
HXLINE(  50)			gather1 = true;
            		}
HXLINE(  59)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_0(f)));
HXDLIN(  59)		if (( (bool)(gather1) )) {
HXDLIN(  59)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXDLIN(  59)			return ret;
            		}
HXDLIN(  59)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Promise_Impl__obj,next,return )

::Dynamic Promise_Impl__obj::swap(::Dynamic this1, ::Dynamic v){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,v) HXARGC(1)
            		 ::Dynamic _hx_run( ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_65_swap)
HXDLIN(  65)			return v;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_65_swap)
HXDLIN(  65)		return ::tink::core::_Future::Future_Impl__obj::_tryMap(this1, ::Dynamic(new _hx_Closure_0(v)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,swap,return )

::Dynamic Promise_Impl__obj::swapError(::Dynamic this1, ::tink::core::TypedError e){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::tink::core::TypedError,e) HXARGC(1)
            		 ::tink::core::TypedError _hx_run( ::tink::core::TypedError _){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_68_swapError)
HXDLIN(  68)			return e;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_68_swapError)
HXDLIN(  68)		return ::tink::core::_Promise::Promise_Impl__obj::mapError(this1, ::Dynamic(new _hx_Closure_0(e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,swapError,return )

::Dynamic Promise_Impl__obj::merge(::Dynamic this1,::Dynamic other, ::Dynamic merger, ::Dynamic __o_gather){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Dynamic,other, ::Dynamic,merger) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic t){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,t, ::Dynamic,merger) HXARGC(1)
            			::Dynamic _hx_run( ::Dynamic a){
            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_71_merge)
HXDLIN(  71)				return merger(t,a);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_71_merge)
HXDLIN(  71)			return ::tink::core::_Promise::Promise_Impl__obj::next(other, ::Dynamic(new _hx_Closure_0(t,merger)),false);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_71_merge)
HXDLIN(  71)		return ::tink::core::_Promise::Promise_Impl__obj::next(this1, ::Dynamic(new _hx_Closure_1(other,merger)),gather);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Promise_Impl__obj,merge,return )

::Dynamic Promise_Impl__obj::_hx_and(::Dynamic a,::Dynamic b){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::Dynamic _hx_run( ::Dynamic a1, ::Dynamic b1){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_74_and)
HXDLIN(  74)			 ::tink::core::MPair this1 =  ::tink::core::MPair_obj::__alloc( HX_CTX ,a1,b1);
HXDLIN(  74)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(this1)));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_74_and)
HXDLIN(  74)		return ::tink::core::_Promise::Promise_Impl__obj::merge(a,b, ::Dynamic(new _hx_Closure_0()),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,_hx_and,return )

::Dynamic Promise_Impl__obj::iterate( ::Dynamic promises, ::Dynamic yield,::Dynamic fallback, ::Dynamic lazy){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3, ::Dynamic,yield,::Dynamic,fallback, ::Dynamic,promises) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_2, ::Dynamic,yield,::Array< ::Dynamic>,next,::Dynamic,fallback, ::Dynamic,cb, ::Dynamic,iter) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_98_iterate)
HXLINE(  98)				if (( (bool)(iter->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )) {
            					HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1, ::Dynamic,yield,::Array< ::Dynamic>,next, ::Dynamic,cb) HXARGC(1)
            					void _hx_run( ::tink::core::Outcome o){
            						HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_99_iterate)
HXLINE(  99)						switch((int)(o->_hx_getIndex())){
            							case (int)0: {
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,next, ::Dynamic,cb) HXARGC(1)
            								void _hx_run( ::tink::core::Outcome o1){
            									HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_101_iterate)
HXLINE( 101)									switch((int)(o1->_hx_getIndex())){
            										case (int)0: {
HXLINE( 103)											 ::haxe::ds::Option _g = o1->_hx_getObject(0);
HXDLIN( 103)											switch((int)(_g->_hx_getIndex())){
            												case (int)0: {
HXLINE( 102)													 ::Dynamic ret = _g->_hx_getObject(0);
HXDLIN( 102)													cb(::tink::core::Outcome_obj::Success(ret));
            												}
            												break;
            												case (int)1: {
HXLINE( 103)													next->__get(0)();
            												}
            												break;
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 104)											 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(o1->_hx_getObject(0)) );
HXDLIN( 104)											cb(::tink::core::Outcome_obj::Failure(e));
            										}
            										break;
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 100)								 ::Dynamic v = o->_hx_getObject(0);
HXLINE( 101)								::tink::core::_Future::FutureObject_obj::handle(yield(v), ::Dynamic(new _hx_Closure_0(next,cb)));
            							}
            							break;
            							case (int)1: {
HXLINE( 106)								 ::tink::core::TypedError e1 = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXLINE( 107)								cb(::tink::core::Outcome_obj::Failure(e1));
            							}
            							break;
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(  99)					::tink::core::_Future::FutureObject_obj::handle(iter->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)(), ::Dynamic(new _hx_Closure_1(yield,next,cb)));
            				}
            				else {
HXLINE( 110)					::tink::core::_Future::FutureObject_obj::handle(fallback,cb);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_95_iterate)
HXLINE(  96)			 ::Dynamic iter = promises->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
HXLINE(  97)			::Array< ::Dynamic> next = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  97)			next[0] =  ::Dynamic(new _hx_Closure_2(yield,next,fallback,cb,iter));
HXLINE( 112)			next->__get(0)();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_95_iterate)
HXDLIN(  95)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_3(yield,fallback,promises)),lazy);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Promise_Impl__obj,iterate,return )

::Dynamic Promise_Impl__obj::retry( ::Dynamic gen, ::Dynamic next){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_155_retry)
HXLINE( 155)			return ( ::__time_stamp() * ( (Float)(1000) ));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_4,Float,start,::Array< ::Dynamic>,attempt, ::Dynamic,stamp, ::Dynamic,next, ::Dynamic,gen) HXARGC(1)
            		::Dynamic _hx_run(int count){
            			HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_2,Float,start,::Array< ::Dynamic>,attempt, ::Dynamic,stamp, ::Dynamic,next,int,count) HXARGC(1)
            			::Dynamic _hx_run( ::tink::core::TypedError error){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,attempt,int,count) HXARGC(1)
            				::Dynamic _hx_run( ::tink::core::Noise _){
            					HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_161_retry)
HXLINE( 161)					return attempt->__get(0)((count + 1));
            				}
            				HX_END_LOCAL_FUNC1(return)

            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_160_retry)
HXLINE( 160)				Float f1 = ( (Float)(stamp()) );
HXDLIN( 160)				return ::tink::core::_Promise::Promise_Impl__obj::next(next( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("elapsed",3c,98,c0,ba),(f1 - start))
            					->setFixed(1,HX_("attempt",0d,c9,98,30),count)
            					->setFixed(2,HX_("error",c8,cb,29,73),error))), ::Dynamic(new _hx_Closure_1(attempt,count)),null());
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Dynamic,f) HXARGC(1)
            			::Dynamic _hx_run( ::tink::core::Outcome o){
            				HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_158_retry)
HXLINE( 158)				switch((int)(o->_hx_getIndex())){
            					case (int)0: {
HXLINE( 158)						 ::Dynamic d = o->_hx_getObject(0);
HXDLIN( 158)						return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,o));
            					}
            					break;
            					case (int)1: {
HXLINE( 158)						 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(o->_hx_getObject(0)) );
HXDLIN( 158)						return f(e);
            					}
            					break;
            				}
HXDLIN( 158)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_158_retry)
HXLINE( 158)			 ::Dynamic f =  ::Dynamic(new _hx_Closure_2(start,attempt,stamp,next,count));
HXDLIN( 158)			::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(gen(), ::Dynamic(new _hx_Closure_3(f)));
HXDLIN( 158)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_154_retry)
HXLINE( 155)		 ::Dynamic stamp =  ::Dynamic(new _hx_Closure_0());
HXLINE( 156)		Float start = ( (Float)(stamp()) );
HXLINE( 157)		::Array< ::Dynamic> attempt = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 157)		attempt[0] =  ::Dynamic(new _hx_Closure_4(start,attempt,stamp,next,gen));
HXDLIN( 157)		return attempt->__get(0)(1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Promise_Impl__obj,retry,return )

::Dynamic Promise_Impl__obj::ofSpecific(::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_180_ofSpecific)
HXDLIN( 180)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,ofSpecific,return )

::Dynamic Promise_Impl__obj::ofFuture(::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_183_ofFuture)
HXDLIN( 183)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(f,::tink::core::Outcome_obj::Success_dyn());
HXDLIN( 183)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,ofFuture,return )

::Dynamic Promise_Impl__obj::ofOutcome( ::tink::core::Outcome o){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_186_ofOutcome)
HXDLIN( 186)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,o));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,ofOutcome,return )

::Dynamic Promise_Impl__obj::ofError( ::tink::core::TypedError e){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_189_ofError)
HXDLIN( 189)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Failure(e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,ofError,return )

::Dynamic Promise_Impl__obj::ofData( ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_192_ofData)
HXDLIN( 192)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(d)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,ofData,return )

::Dynamic Promise_Impl__obj::lazy(::Dynamic p){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Dynamic,p) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_195_lazy)
HXDLIN( 195)			::tink::core::_Future::FutureObject_obj::handle(::tink::core::_Lazy::LazyObject_obj::get(p),cb);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_195_lazy)
HXDLIN( 195)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_0(p)),true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,lazy,return )

::Dynamic Promise_Impl__obj::inParallel(::Array< ::Dynamic> a, ::Dynamic concurrency, ::Dynamic lazy){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_197_inParallel)
HXDLIN( 197)		::Array< ::Dynamic> concurrency1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,concurrency);
HXLINE( 199)		if ((a->length == 0)) {
HXLINE( 199)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(::cpp::VirtualArray_obj::__new(0))));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5,::Array< ::Dynamic>,a,::Array< ::Dynamic>,concurrency1) HXARGC(1)
            			void _hx_run( ::Dynamic cb){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::Array< bool >,sync,::Array< ::Dynamic>,links, ::Dynamic,cb) HXARGC(1)
            				void _hx_run( ::tink::core::Outcome o){
            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_210_inParallel)
HXLINE( 211)					if (hx::IsNull( links->__get(0) )) {
HXLINE( 211)						sync[0] = true;
            					}
            					else {
HXLINE( 212)						if (hx::IsNotNull( links->__get(0) )) {
HXLINE( 212)							::tink::core::LinkObject_obj::cancel(links->__get(0));
            						}
            					}
HXLINE( 213)					cb(o);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Array< int >,pending, ::Dynamic,done) HXARGC(1)
            				void _hx_run( ::tink::core::TypedError e){
            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_216_inParallel)
HXLINE( 217)					pending[0] = 0;
HXLINE( 218)					done(::tink::core::Outcome_obj::Failure(e));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,iter_array,::Array< int >,iter_current,::Array< ::Dynamic>,next,::Array< int >,pending, ::Dynamic,done,::cpp::VirtualArray,result) HXARGC(2)
            				void _hx_run(int index, ::Dynamic value){
            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_225_inParallel)
HXLINE( 226)					result->set(index,value);
HXLINE( 227)					if ((--pending[0] == 0)) {
HXLINE( 228)						done(::tink::core::Outcome_obj::Success(result));
            					}
            					else {
HXLINE( 229)						bool set1;
HXDLIN( 229)						if ((iter_current->__get(0) < iter_array->length)) {
HXLINE( 229)							set1 = (pending->__get(0) > 0);
            						}
            						else {
HXLINE( 229)							set1 = false;
            						}
HXDLIN( 229)						if (set1) {
HXLINE( 230)							next->__get(0)();
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_4, ::Dynamic,set, ::Dynamic,fail,::Array< ::Dynamic>,iter_array,::Array< int >,iter_current,::Array< ::Dynamic>,linkArray,::Array< int >,i) HXARGC(0)
            				void _hx_run(){
            					HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3, ::Dynamic,fail, ::Dynamic,set,int,index1) HXARGC(1)
            					void _hx_run( ::tink::core::Outcome o1){
            						HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_235_inParallel)
HXLINE( 235)						switch((int)(o1->_hx_getIndex())){
            							case (int)0: {
HXLINE( 236)								 ::Dynamic v = o1->_hx_getObject(0);
HXDLIN( 236)								set(index1,v);
            							}
            							break;
            							case (int)1: {
HXLINE( 237)								 ::tink::core::TypedError e1 = ( ( ::tink::core::TypedError)(o1->_hx_getObject(0)) );
HXDLIN( 237)								fail(e1);
            							}
            							break;
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_233_inParallel)
HXLINE( 234)					int index1 = i[0]++;
HXLINE( 235)					::Dynamic _hx_tmp = ::tink::core::_Future::FutureObject_obj::handle(iter_array->__get(iter_current[0]++), ::Dynamic(new _hx_Closure_3(fail,set,index1)));
HXDLIN( 235)					linkArray->push(_hx_tmp);
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_200_inParallel)
HXLINE( 201)				::cpp::VirtualArray result = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 201)				::Array< int > pending = ::Array_obj< int >::__new(1)->init(0,a->length);
HXDLIN( 201)				::Array< ::Dynamic> links = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 201)				::Array< ::Dynamic> linkArray = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 201)				::Array< bool > sync = ::Array_obj< bool >::fromData( _hx_array_data_1351971c_55,1);
HXDLIN( 201)				::Array< int > i = ::Array_obj< int >::fromData( _hx_array_data_1351971c_56,1);
HXLINE( 207)				::Array< int > iter_current = ::Array_obj< int >::__new(0);
HXDLIN( 207)				::Array< ::Dynamic> iter_array;
HXDLIN( 207)				iter_current[0] = 0;
HXDLIN( 207)				iter_array = a;
HXLINE( 201)				::Array< ::Dynamic> next = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 210)				 ::Dynamic done =  ::Dynamic(new _hx_Closure_0(sync,links,cb));
HXLINE( 216)				 ::Dynamic fail =  ::Dynamic(new _hx_Closure_1(pending,done));
HXLINE( 225)				 ::Dynamic set =  ::Dynamic(new _hx_Closure_2(iter_array,iter_current,next,pending,done,result));
HXLINE( 233)				next[0] =  ::Dynamic(new _hx_Closure_4(set,fail,iter_array,iter_current,linkArray,i));
HXLINE( 241)				while(true){
HXLINE( 241)					bool _hx_tmp1;
HXDLIN( 241)					bool _hx_tmp2;
HXDLIN( 241)					if ((iter_current->__get(0) < iter_array->length)) {
HXLINE( 241)						_hx_tmp2 = (pending->__get(0) > 0);
            					}
            					else {
HXLINE( 241)						_hx_tmp2 = false;
            					}
HXDLIN( 241)					if (_hx_tmp2) {
HXLINE( 241)						if (hx::IsNotNull( concurrency1->__get(0) )) {
HXLINE( 241)							_hx_tmp1 = (hx::IndexRef(concurrency1.mPtr,0)-- > 0);
            						}
            						else {
HXLINE( 241)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE( 241)						_hx_tmp1 = false;
            					}
HXDLIN( 241)					if (!(_hx_tmp1)) {
HXLINE( 241)						goto _hx_goto_47;
            					}
HXLINE( 242)					next->__get(0)();
            				}
            				_hx_goto_47:;
HXLINE( 245)				links[0] = ::tink::core::_Callback::CallbackLink_Impl__obj::fromMany(linkArray);
HXLINE( 247)				if (sync->__get(0)) {
HXLINE( 248)					if (hx::IsNotNull( links->__get(0) )) {
HXLINE( 248)						::tink::core::LinkObject_obj::cancel(links->__get(0));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 200)			return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_5(a,concurrency1)),lazy);
            		}
HXLINE( 199)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Promise_Impl__obj,inParallel,return )

::Dynamic Promise_Impl__obj::inSequence(::Array< ::Dynamic> a){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,a,::Array< ::Dynamic>,loop) HXARGC(1)
            		::Dynamic _hx_run(int index){
            			HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_255_inSequence)
HXLINE( 255)			if ((index == a->length)) {
HXLINE( 255)				return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(::cpp::VirtualArray_obj::__new(0))));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,int,index,::Array< ::Dynamic>,loop) HXARGC(1)
            				::Dynamic _hx_run( ::Dynamic head){
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,head) HXARGC(1)
            					::Dynamic _hx_run(::cpp::VirtualArray tail){
            						HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_259_inSequence)
HXLINE( 259)						return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(::cpp::VirtualArray_obj::__new(1)->init(0,head)->concat(tail))));
            					}
            					HX_END_LOCAL_FUNC1(return)

            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_258_inSequence)
HXLINE( 258)					return ::tink::core::_Promise::Promise_Impl__obj::next(loop->__get(0)((index + 1)), ::Dynamic(new _hx_Closure_0(head)),null());
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 257)				return ::tink::core::_Promise::Promise_Impl__obj::next(a->__get(index), ::Dynamic(new _hx_Closure_1(index,loop)),null());
            			}
HXLINE( 255)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_251_inSequence)
HXLINE( 253)		::Array< ::Dynamic> loop = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 253)		loop[0] =  ::Dynamic(new _hx_Closure_2(a,loop));
HXLINE( 264)		return loop->__get(0)(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,inSequence,return )

 ::Dynamic Promise_Impl__obj::cache( ::Dynamic gen){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3,::Array< ::Dynamic>,p, ::Dynamic,gen) HXARGC(0)
            		::Dynamic _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,p) HXARGC(1)
            			 ::tink::core::Outcome _hx_run( ::tink::core::Outcome o1){
            				HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_283_cache)
HXLINE( 284)				if (!(::tink::core::OutcomeTools_obj::isSuccess(o1))) {
HXLINE( 284)					p[0] = null();
            				}
HXLINE( 285)				return o1;
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_270_cache)
HXLINE( 271)			::Dynamic ret = p->__get(0);
HXLINE( 272)			if (hx::IsNull( ret )) {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Array< bool >,sync,::Array< ::Dynamic>,p) HXARGC(1)
            				::Dynamic _hx_run( ::tink::core::MPair o){
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< bool >,sync,::Array< ::Dynamic>,p) HXARGC(1)
            					void _hx_run( ::tink::core::Noise _){
            						HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_275_cache)
HXLINE( 276)						sync[0] = true;
HXLINE( 277)						p[0] = null();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_274_cache)
HXLINE( 275)					::tink::core::_Future::FutureObject_obj::handle(o->b, ::Dynamic(new _hx_Closure_0(sync,p)));
HXLINE( 279)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(o->a)));
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 273)				::Array< bool > sync = ::Array_obj< bool >::fromData( _hx_array_data_1351971c_65,1);
HXLINE( 274)				ret = ::tink::core::_Promise::Promise_Impl__obj::next(gen(), ::Dynamic(new _hx_Closure_1(sync,p)),null());
HXLINE( 281)				if (!(sync->__get(0))) {
HXLINE( 281)					p[0] = ret;
            				}
            			}
HXLINE( 283)			::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(ret, ::Dynamic(new _hx_Closure_2(p)));
HXDLIN( 283)			return ::tink::core::_Future::FutureObject_obj::gather(ret1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_268_cache)
HXLINE( 269)		::Array< ::Dynamic> p = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 270)		return  ::Dynamic(new _hx_Closure_3(p,gen));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,cache,return )

::Dynamic Promise_Impl__obj::lift(::Dynamic p){
            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_293_lift)
HXDLIN( 293)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,lift,return )

 ::tink::core::FutureTrigger Promise_Impl__obj::trigger(){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_300_trigger)
HXDLIN( 300)		 ::tink::core::FutureTrigger this1 =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXDLIN( 300)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Promise_Impl__obj,trigger,return )

::Dynamic Promise_Impl__obj::resolve( ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_304_resolve)
HXDLIN( 304)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(v)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,resolve,return )

::Dynamic Promise_Impl__obj::reject( ::tink::core::TypedError e){
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_308_reject)
HXDLIN( 308)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Failure(e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Promise_Impl__obj,reject,return )


Promise_Impl__obj::Promise_Impl__obj()
{
}

bool Promise_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"swap") ) { outValue = swap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lazy") ) { outValue = lazy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lift") ) { outValue = lift_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eager") ) { outValue = eager_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"noise") ) { outValue = noise_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"retry") ) { outValue = retry_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = cache_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { outValue = handle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofData") ) { outValue = ofData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reject") ) { outValue = reject_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"recover") ) { outValue = recover_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterate") ) { outValue = iterate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofError") ) { outValue = ofError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trigger") ) { outValue = trigger_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolve") ) { outValue = resolve_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapError") ) { outValue = mapError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofFuture") ) { outValue = ofFuture_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isSuccess") ) { outValue = isSuccess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"swapError") ) { outValue = swapError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofOutcome") ) { outValue = ofOutcome_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tryRecover") ) { outValue = tryRecover_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofSpecific") ) { outValue = ofSpecific_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inParallel") ) { outValue = inParallel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inSequence") ) { outValue = inSequence_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Promise_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Promise_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(void *) &Promise_Impl__obj::_hx_NULL,HX_("NULL",87,66,cf,33)},
	{hx::fsObject /* ::Dynamic */ ,(void *) &Promise_Impl__obj::NOISE,HX_("NOISE",7a,c7,b0,1d)},
	{hx::fsObject /* ::Dynamic */ ,(void *) &Promise_Impl__obj::NEVER,HX_("NEVER",6c,76,1e,17)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Promise_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Promise_Impl__obj::_hx_NULL,"NULL");
	HX_MARK_MEMBER_NAME(Promise_Impl__obj::NOISE,"NOISE");
	HX_MARK_MEMBER_NAME(Promise_Impl__obj::NEVER,"NEVER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Promise_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Promise_Impl__obj::_hx_NULL,"NULL");
	HX_VISIT_MEMBER_NAME(Promise_Impl__obj::NOISE,"NOISE");
	HX_VISIT_MEMBER_NAME(Promise_Impl__obj::NEVER,"NEVER");
};

#endif

hx::Class Promise_Impl__obj::__mClass;

static ::String Promise_Impl__obj_sStaticFields[] = {
	HX_("NULL",87,66,cf,33),
	HX_("NOISE",7a,c7,b0,1d),
	HX_("NEVER",6c,76,1e,17),
	HX_("_new",61,15,1f,3f),
	HX_("eager",b8,c9,e4,67),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("tryRecover",a9,7e,66,18),
	HX_("recover",a4,52,fe,30),
	HX_("mapError",8c,3b,6c,ea),
	HX_("handle",a8,83,fd,b7),
	HX_("noise",9a,8f,c2,9f),
	HX_("isSuccess",f9,a2,4c,bc),
	HX_("next",f3,84,02,49),
	HX_("swap",93,2a,5e,4c),
	HX_("swapError",35,dc,d6,e8),
	HX_("merge",b8,a2,c6,05),
	HX_("and",d7,fa,49,00),
	HX_("iterate",fa,79,d0,e2),
	HX_("retry",68,17,c9,e6),
	HX_("ofSpecific",e9,cc,a4,d1),
	HX_("ofFuture",ba,d8,4f,06),
	HX_("ofOutcome",3b,e0,e6,e9),
	HX_("ofError",31,87,8c,d6),
	HX_("ofData",e1,ba,b8,49),
	HX_("lazy",74,10,ad,47),
	HX_("inParallel",cc,af,ee,d9),
	HX_("inSequence",46,23,e5,44),
	HX_("cache",42,9a,14,41),
	HX_("lift",0b,11,b3,47),
	HX_("trigger",38,55,df,25),
	HX_("resolve",ec,12,60,67),
	HX_("reject",5f,51,85,02),
	::String(null())
};

void Promise_Impl__obj::__register()
{
	Promise_Impl__obj _hx_dummy;
	Promise_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Promise.Promise_Impl_",1c,97,51,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Promise_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Promise_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Promise_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Promise_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Promise_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Promise_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Promise_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Promise_Impl__obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_12_boot)
HXDLIN(  12)		_hx_NULL =  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(null())));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_13_boot)
HXDLIN(  13)		NOISE =  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Success(::tink::core::Noise_obj::Noise_dyn())));
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_14_boot)
HXDLIN(  14)			::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(::tink::core::_Future::Future_Impl__obj::NEVER,::tink::core::Outcome_obj::Success_dyn());
HXDLIN(  14)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_113c0f6d76f4dafd_14_boot)
HXDLIN(  14)		NEVER =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace tink
} // end namespace core
} // end namespace _Promise
