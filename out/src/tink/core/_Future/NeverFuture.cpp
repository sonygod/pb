// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_NeverFuture
#include <tink/core/_Future/NeverFuture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eaa572dec62476ff_223_new,"tink.core._Future.NeverFuture","new",0x1f165ec2,"tink.core._Future.NeverFuture.new","tink/core/Future.hx",223,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_224_map,"tink.core._Future.NeverFuture","map",0x1f1598fe,"tink.core._Future.NeverFuture.map","tink/core/Future.hx",224,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_225_flatMap,"tink.core._Future.NeverFuture","flatMap",0xe24477c5,"tink.core._Future.NeverFuture.flatMap","tink/core/Future.hx",225,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_226_handle,"tink.core._Future.NeverFuture","handle",0xdb8e9e86,"tink.core._Future.NeverFuture.handle","tink/core/Future.hx",226,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_227_gather,"tink.core._Future.NeverFuture","gather",0x792d8cd9,"tink.core._Future.NeverFuture.gather","tink/core/Future.hx",227,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_228_eager,"tink.core._Future.NeverFuture","eager",0xa731349a,"tink.core._Future.NeverFuture.eager","tink/core/Future.hx",228,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_eaa572dec62476ff_222_boot,"tink.core._Future.NeverFuture","boot",0x0c958b90,"tink.core._Future.NeverFuture.boot","tink/core/Future.hx",222,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void NeverFuture_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_223_new)
            	}

Dynamic NeverFuture_obj::__CreateEmpty() { return new NeverFuture_obj; }

void *NeverFuture_obj::_hx_vtable = 0;

Dynamic NeverFuture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NeverFuture_obj > _hx_result = new NeverFuture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NeverFuture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bc828a6;
}

static ::tink::core::_Future::FutureObject_obj _hx_tink_core__Future_NeverFuture__hx_tink_core__Future_FutureObject= {
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NeverFuture_obj::map,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NeverFuture_obj::flatMap,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Future::NeverFuture_obj::handle,
	( ::Dynamic (hx::Object::*)())&::tink::core::_Future::NeverFuture_obj::gather,
	( ::Dynamic (hx::Object::*)())&::tink::core::_Future::NeverFuture_obj::eager,
};

void *NeverFuture_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xb1c7c493: return &_hx_tink_core__Future_NeverFuture__hx_tink_core__Future_FutureObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic NeverFuture_obj::map( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_224_map)
HXDLIN( 224)		return ::tink::core::_Future::NeverFuture_obj::inst;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NeverFuture_obj,map,return )

::Dynamic NeverFuture_obj::flatMap( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_225_flatMap)
HXDLIN( 225)		return ::tink::core::_Future::NeverFuture_obj::inst;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NeverFuture_obj,flatMap,return )

::Dynamic NeverFuture_obj::handle( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_226_handle)
HXDLIN( 226)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NeverFuture_obj,handle,return )

::Dynamic NeverFuture_obj::gather(){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_227_gather)
HXDLIN( 227)		return ::tink::core::_Future::NeverFuture_obj::inst;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NeverFuture_obj,gather,return )

::Dynamic NeverFuture_obj::eager(){
            	HX_STACKFRAME(&_hx_pos_eaa572dec62476ff_228_eager)
HXDLIN( 228)		return ::tink::core::_Future::NeverFuture_obj::inst;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NeverFuture_obj,eager,return )

 ::tink::core::_Future::NeverFuture NeverFuture_obj::inst;


hx::ObjectPtr< NeverFuture_obj > NeverFuture_obj::__new() {
	hx::ObjectPtr< NeverFuture_obj > __this = new NeverFuture_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< NeverFuture_obj > NeverFuture_obj::__alloc(hx::Ctx *_hx_ctx) {
	NeverFuture_obj *__this = (NeverFuture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NeverFuture_obj), false, "tink.core._Future.NeverFuture"));
	*(void **)__this = NeverFuture_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NeverFuture_obj::NeverFuture_obj()
{
}

hx::Val NeverFuture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eager") ) { return hx::Val( eager_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle_dyn() ); }
		if (HX_FIELD_EQ(inName,"gather") ) { return hx::Val( gather_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NeverFuture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { outValue = ( inst ); return true; }
	}
	return false;
}

bool NeverFuture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { inst=ioValue.Cast<  ::tink::core::_Future::NeverFuture >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *NeverFuture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo NeverFuture_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::tink::core::_Future::NeverFuture */ ,(void *) &NeverFuture_obj::inst,HX_("inst",c6,43,bb,45)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NeverFuture_obj_sMemberFields[] = {
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("handle",a8,83,fd,b7),
	HX_("gather",fb,71,9c,55),
	HX_("eager",b8,c9,e4,67),
	::String(null()) };

static void NeverFuture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NeverFuture_obj::inst,"inst");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NeverFuture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NeverFuture_obj::inst,"inst");
};

#endif

hx::Class NeverFuture_obj::__mClass;

static ::String NeverFuture_obj_sStaticFields[] = {
	HX_("inst",c6,43,bb,45),
	::String(null())
};

void NeverFuture_obj::__register()
{
	NeverFuture_obj _hx_dummy;
	NeverFuture_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.NeverFuture",d0,95,13,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NeverFuture_obj::__GetStatic;
	__mClass->mSetStaticField = &NeverFuture_obj::__SetStatic;
	__mClass->mMarkFunc = NeverFuture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NeverFuture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NeverFuture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NeverFuture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NeverFuture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NeverFuture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NeverFuture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NeverFuture_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_eaa572dec62476ff_222_boot)
HXDLIN( 222)		inst =  ::tink::core::_Future::NeverFuture_obj::__alloc( HX_CTX );
            	}
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
