// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_Either
#include <haxe/ds/Either.h>
#endif
#ifndef INCLUDED_tink_core_FutureTrigger
#include <tink/core/FutureTrigger.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_MPair
#include <tink/core/MPair.h>
#endif
#ifndef INCLUDED_tink_core_Noise
#include <tink/core/Noise.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core_OutcomeTools
#include <tink/core/OutcomeTools.h>
#endif
#ifndef INCLUDED_tink_core__Callback_Callback_Impl_
#include <tink/core/_Callback/Callback_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif
#ifndef INCLUDED_tink_core__Future_LazyTrigger
#include <tink/core/_Future/LazyTrigger.h>
#endif
#ifndef INCLUDED_tink_core__Future_NestedFuture
#include <tink/core/_Future/NestedFuture.h>
#endif
#ifndef INCLUDED_tink_core__Future_NeverFuture
#include <tink/core/_Future/NeverFuture.h>
#endif
#ifndef INCLUDED_tink_core__Future_SimpleFuture
#include <tink/core/_Future/SimpleFuture.h>
#endif
#ifndef INCLUDED_tink_core__Future_SyncFuture
#include <tink/core/_Future/SyncFuture.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif
#ifndef INCLUDED_tink_core__Outcome_OutcomeMapper_Impl_
#include <tink/core/_Outcome/OutcomeMapper_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_17__new,"tink.core._Future.Future_Impl_","_new",0x9e4dd52d,"tink.core._Future.Future_Impl_._new","tink/core/Future.hx",17,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_23_first,"tink.core._Future.Future_Impl_","first",0xea568ae4,"tink.core._Future.Future_Impl_.first","tink/core/Future.hx",23,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_29_first,"tink.core._Future.Future_Impl_","first",0xea568ae4,"tink.core._Future.Future_Impl_.first","tink/core/Future.hx",29,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_31_first,"tink.core._Future.Future_Impl_","first",0xea568ae4,"tink.core._Future.Future_Impl_.first","tink/core/Future.hx",31,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_39_map,"tink.core._Future.Future_Impl_","map",0x637a4850,"tink.core._Future.Future_Impl_.map","tink/core/Future.hx",39,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_50_flatMap,"tink.core._Future.Future_Impl_","flatMap",0x7f083817,"tink.core._Future.Future_Impl_.flatMap","tink/core/Future.hx",50,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_62_next,"tink.core._Future.Future_Impl_","next",0xa83144bf,"tink.core._Future.Future_Impl_.next","tink/core/Future.hx",62,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_69_merge,"tink.core._Future.Future_Impl_","merge",0xef7fb56c,"tink.core._Future.Future_Impl_.merge","tink/core/Future.hx",69,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_68_merge,"tink.core._Future.Future_Impl_","merge",0xef7fb56c,"tink.core._Future.Future_Impl_.merge","tink/core/Future.hx",68,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_76_flatten,"tink.core._Future.Future_Impl_","flatten",0x7f25d378,"tink.core._Future.Future_Impl_.flatten","tink/core/Future.hx",76,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_87_ofAny,"tink.core._Future.Future_Impl_","ofAny",0x16d0ecc9,"tink.core._Future.Future_Impl_.ofAny","tink/core/Future.hx",87,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_93_asPromise,"tink.core._Future.Future_Impl_","asPromise",0xf9277f7d,"tink.core._Future.Future_Impl_.asPromise","tink/core/Future.hx",93,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_98_ofMany,"tink.core._Future.Future_Impl_","ofMany",0xe7e2ec22,"tink.core._Future.Future_Impl_.ofMany","tink/core/Future.hx",98,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_105_ofMany,"tink.core._Future.Future_Impl_","ofMany",0xe7e2ec22,"tink.core._Future.Future_Impl_.ofMany","tink/core/Future.hx",105,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_103_ofMany,"tink.core._Future.Future_Impl_","ofMany",0xe7e2ec22,"tink.core._Future.Future_Impl_.ofMany","tink/core/Future.hx",103,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_117_fromMany,"tink.core._Future.Future_Impl_","fromMany",0x32daa0f5,"tink.core._Future.Future_Impl_.fromMany","tink/core/Future.hx",117,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_121_lazy,"tink.core._Future.Future_Impl_","lazy",0xa6dbd040,"tink.core._Future.Future_Impl_.lazy","tink/core/Future.hx",121,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_128_sync,"tink.core._Future.Future_Impl_","sync",0xab8e7a27,"tink.core._Future.Future_Impl_.sync","tink/core/Future.hx",128,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_136_async,"tink.core._Future.Future_Impl_","async",0x0ff711f0,"tink.core._Future.Future_Impl_.async","tink/core/Future.hx",136,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_149_or,"tink.core._Future.Future_Impl_","or",0xcdef55ef,"tink.core._Future.Future_Impl_.or","tink/core/Future.hx",149,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_155_either,"tink.core._Future.Future_Impl_","either",0xbc51a811,"tink.core._Future.Future_Impl_.either","tink/core/Future.hx",155,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_161_and,"tink.core._Future.Future_Impl_","and",0x6371388b,"tink.core._Future.Future_Impl_.and","tink/core/Future.hx",161,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_164__tryFailingFlatMap,"tink.core._Future.Future_Impl_","_tryFailingFlatMap",0x48c2e727,"tink.core._Future.Future_Impl_._tryFailingFlatMap","tink/core/Future.hx",164,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_170__tryFlatMap,"tink.core._Future.Future_Impl_","_tryFlatMap",0xdaba1b3b,"tink.core._Future.Future_Impl_._tryFlatMap","tink/core/Future.hx",170,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_176__tryFailingMap,"tink.core._Future.Future_Impl_","_tryFailingMap",0x2a4c2f60,"tink.core._Future.Future_Impl_._tryFailingMap","tink/core/Future.hx",176,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_179__tryMap,"tink.core._Future.Future_Impl_","_tryMap",0x5beac974,"tink.core._Future.Future_Impl_._tryMap","tink/core/Future.hx",179,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_182__flatMap,"tink.core._Future.Future_Impl_","_flatMap",0xad4effb0,"tink.core._Future.Future_Impl_._flatMap","tink/core/Future.hx",182,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_185__map,"tink.core._Future.Future_Impl_","_map",0x9e4d0f69,"tink.core._Future.Future_Impl_._map","tink/core/Future.hx",185,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_191_trigger,"tink.core._Future.Future_Impl_","trigger",0xbe097cec,"tink.core._Future.Future_Impl_.trigger","tink/core/Future.hx",191,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_194_delay,"tink.core._Future.Future_Impl_","delay",0xc0dfea37,"tink.core._Future.Future_Impl_.delay","tink/core/Future.hx",194,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_13_boot,"tink.core._Future.Future_Impl_","boot",0xa04a43fe,"tink.core._Future.Future_Impl_.boot","tink/core/Future.hx",13,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_14_boot,"tink.core._Future.Future_Impl_","boot",0xa04a43fe,"tink.core._Future.Future_Impl_.boot","tink/core/Future.hx",14,0x014a8a08)
HX_LOCAL_STACK_FRAME(_hx_pos_589b450cd6df12cf_15_boot,"tink.core._Future.Future_Impl_","boot",0xa04a43fe,"tink.core._Future.Future_Impl_.boot","tink/core/Future.hx",15,0x014a8a08)
namespace tink{
namespace core{
namespace _Future{

void Future_Impl__obj::__construct() { }

Dynamic Future_Impl__obj::__CreateEmpty() { return new Future_Impl__obj; }

void *Future_Impl__obj::_hx_vtable = 0;

Dynamic Future_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Future_Impl__obj > _hx_result = new Future_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Future_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1903e3a8;
}

::Dynamic Future_Impl__obj::_hx_NULL;

::Dynamic Future_Impl__obj::NOISE;

::Dynamic Future_Impl__obj::NEVER;

::Dynamic Future_Impl__obj::_new( ::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_17__new)
HXDLIN(  17)		::Dynamic this1 =  ::tink::core::_Future::SimpleFuture_obj::__alloc( HX_CTX ,f);
HXDLIN(  17)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,_new,return )

::Dynamic Future_Impl__obj::first(::Dynamic this1,::Dynamic other){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_23_first)
HXLINE(  24)		 ::tink::core::FutureTrigger ret =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE(  25)		::Dynamic l1 = ::tink::core::_Future::FutureObject_obj::handle(this1,ret->trigger_dyn());
HXLINE(  26)		::Dynamic l2 = ::tink::core::_Future::FutureObject_obj::handle(other,ret->trigger_dyn());
HXLINE(  27)		::Dynamic ret1 = ret;
HXLINE(  28)		if (hx::IsNotNull( l1 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Dynamic,this2) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_29_first)
HXLINE(  29)				::tink::core::LinkObject_obj::cancel(this2);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  29)			::Dynamic this2 = l1;
HXDLIN(  29)			::tink::core::_Future::FutureObject_obj::handle(ret1, ::Dynamic(new _hx_Closure_0(this2)));
            		}
HXLINE(  30)		if (hx::IsNotNull( l2 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Dynamic,this3) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_31_first)
HXLINE(  31)				::tink::core::LinkObject_obj::cancel(this3);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  31)			::Dynamic this3 = l2;
HXDLIN(  31)			::tink::core::_Future::FutureObject_obj::handle(ret1, ::Dynamic(new _hx_Closure_1(this3)));
            		}
HXLINE(  32)		return ret1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,first,return )

::Dynamic Future_Impl__obj::map(::Dynamic this1, ::Dynamic f, ::Dynamic __o_gather){
            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_39_map)
HXLINE(  40)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(this1,f);
HXLINE(  42)		if (( (bool)(gather) )) {
HXLINE(  42)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXLINE(  43)			return ret;
            		}
HXLINE(  42)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Future_Impl__obj,map,return )

::Dynamic Future_Impl__obj::flatMap(::Dynamic this1, ::Dynamic next, ::Dynamic __o_gather){
            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_50_flatMap)
HXLINE(  51)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1,next);
HXLINE(  53)		if (( (bool)(gather) )) {
HXLINE(  53)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXLINE(  54)			return ret;
            		}
HXLINE(  53)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Future_Impl__obj,flatMap,return )

::Dynamic Future_Impl__obj::next(::Dynamic this1, ::Dynamic n){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,n) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic v){
            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_62_next)
HXDLIN(  62)			return n(v);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_62_next)
HXDLIN(  62)		return ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_0(n)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,next,return )

::Dynamic Future_Impl__obj::merge(::Dynamic this1,::Dynamic other, ::Dynamic merger, ::Dynamic __o_gather){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Dynamic,other, ::Dynamic,merger) HXARGC(1)
            		::Dynamic _hx_run( ::Dynamic t){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,t, ::Dynamic,merger) HXARGC(1)
            			 ::Dynamic _hx_run( ::Dynamic a){
            				HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_69_merge)
HXLINE(  69)				return merger(t,a);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_69_merge)
HXLINE(  69)			 ::Dynamic gather2 = false;
HXLINE(  39)			if (hx::IsNull( gather2 )) {
HXLINE(  39)				gather2 = true;
            			}
HXLINE(  69)			::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(other, ::Dynamic(new _hx_Closure_0(t,merger)));
HXDLIN(  69)			if (( (bool)(gather2) )) {
HXLINE(  69)				return ::tink::core::_Future::FutureObject_obj::gather(ret1);
            			}
            			else {
HXLINE(  69)				return ret1;
            			}
HXDLIN(  69)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_68_merge)
HXDLIN(  68)		 ::Dynamic gather1 = gather;
HXLINE(  50)		if (hx::IsNull( gather1 )) {
HXLINE(  50)			gather1 = true;
            		}
HXLINE(  68)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(this1, ::Dynamic(new _hx_Closure_1(other,merger)));
HXDLIN(  68)		if (( (bool)(gather1) )) {
HXDLIN(  68)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXDLIN(  68)			return ret;
            		}
HXDLIN(  68)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Future_Impl__obj,merge,return )

::Dynamic Future_Impl__obj::flatten(::Dynamic f){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_76_flatten)
HXDLIN(  76)		return  ::tink::core::_Future::NestedFuture_obj::__alloc( HX_CTX ,f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,flatten,return )

::Dynamic Future_Impl__obj::ofAny( ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_87_ofAny)
HXDLIN(  87)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,ofAny,return )

::Dynamic Future_Impl__obj::asPromise(::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_93_asPromise)
HXDLIN(  93)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,asPromise,return )

::Dynamic Future_Impl__obj::ofMany(::Array< ::Dynamic> futures, ::Dynamic __o_gather){
            		 ::Dynamic gather = __o_gather;
            		if (hx::IsNull(__o_gather)) gather = true;
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_98_ofMany)
HXLINE(  99)		::Dynamic ret =  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::cpp::VirtualArray_obj::__new(0)));
HXLINE( 100)		{
HXLINE( 100)			int _g = 0;
HXDLIN( 100)			while((_g < futures->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Dynamic,f) HXARGC(1)
            				::Dynamic _hx_run(::cpp::VirtualArray results){
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,results) HXARGC(1)
            					::cpp::VirtualArray _hx_run( ::Dynamic result){
            						HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_105_ofMany)
HXLINE( 105)						return results->concat(::cpp::VirtualArray_obj::__new(1)->init(0,result));
            					}
            					HX_END_LOCAL_FUNC1(return)

            					HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_103_ofMany)
HXLINE( 103)					 ::Dynamic gather2 = false;
HXLINE(  39)					if (hx::IsNull( gather2 )) {
HXLINE(  39)						gather2 = true;
            					}
HXLINE( 103)					::Dynamic ret2 = ::tink::core::_Future::FutureObject_obj::map(f, ::Dynamic(new _hx_Closure_0(results)));
HXDLIN( 103)					if (( (bool)(gather2) )) {
HXLINE( 103)						return ::tink::core::_Future::FutureObject_obj::gather(ret2);
            					}
            					else {
HXLINE( 103)						return ret2;
            					}
HXDLIN( 103)					return null();
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 100)				::Dynamic f = futures->__get(_g);
HXDLIN( 100)				_g = (_g + 1);
HXLINE( 101)				 ::Dynamic gather1 = false;
HXLINE(  50)				if (hx::IsNull( gather1 )) {
HXLINE(  50)					gather1 = true;
            				}
HXLINE( 101)				::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::flatMap(ret, ::Dynamic(new _hx_Closure_1(f)));
HXDLIN( 101)				if (( (bool)(gather1) )) {
HXLINE( 101)					ret = ::tink::core::_Future::FutureObject_obj::gather(ret1);
            				}
            				else {
HXLINE( 101)					ret = ret1;
            				}
            			}
            		}
HXLINE( 111)		if (( (bool)(gather) )) {
HXLINE( 111)			return ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXLINE( 112)			return ret;
            		}
HXLINE( 111)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,ofMany,return )

::Dynamic Future_Impl__obj::fromMany(::Array< ::Dynamic> futures){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_117_fromMany)
HXDLIN( 117)		return ::tink::core::_Future::Future_Impl__obj::ofMany(futures,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,fromMany,return )

::Dynamic Future_Impl__obj::lazy(::Dynamic l){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_121_lazy)
HXDLIN( 121)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX ,l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,lazy,return )

::Dynamic Future_Impl__obj::sync( ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_128_sync)
HXDLIN( 128)		return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_Impl__obj,sync,return )

::Dynamic Future_Impl__obj::async( ::Dynamic f, ::Dynamic __o_lazy){
            		 ::Dynamic lazy = __o_lazy;
            		if (hx::IsNull(__o_lazy)) lazy = false;
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_136_async)
HXDLIN( 136)		if (( (bool)(lazy) )) {
HXLINE( 137)			return  ::tink::core::_Future::LazyTrigger_obj::__alloc( HX_CTX ,f);
            		}
            		else {
HXLINE( 139)			 ::tink::core::FutureTrigger op =  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
HXLINE( 140)			 ::Dynamic wrapped = f;
HXLINE( 141)			::tink::core::_Callback::Callback_Impl__obj::invoke(wrapped,op->trigger_dyn());
HXLINE( 142)			return op;
            		}
HXLINE( 136)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,async,return )

::Dynamic Future_Impl__obj::_hx_or(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_149_or)
HXDLIN( 149)		return ::tink::core::_Future::Future_Impl__obj::first(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_hx_or,return )

::Dynamic Future_Impl__obj::either(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_155_either)
HXDLIN( 155)		 ::Dynamic gather = false;
HXLINE(  39)		if (hx::IsNull( gather )) {
HXLINE(  39)			gather = true;
            		}
HXLINE( 155)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(a,::haxe::ds::Either_obj::Left_dyn());
HXDLIN( 155)		::Dynamic _hx_tmp;
HXDLIN( 155)		if (( (bool)(gather) )) {
HXDLIN( 155)			_hx_tmp = ::tink::core::_Future::FutureObject_obj::gather(ret);
            		}
            		else {
HXDLIN( 155)			_hx_tmp = ret;
            		}
HXDLIN( 155)		 ::Dynamic gather1 = false;
HXLINE(  39)		if (hx::IsNull( gather1 )) {
HXLINE(  39)			gather1 = true;
            		}
HXLINE( 155)		::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(b,::haxe::ds::Either_obj::Right_dyn());
HXDLIN( 155)		::Dynamic _hx_tmp1;
HXDLIN( 155)		if (( (bool)(gather1) )) {
HXDLIN( 155)			_hx_tmp1 = ::tink::core::_Future::FutureObject_obj::gather(ret1);
            		}
            		else {
HXDLIN( 155)			_hx_tmp1 = ret1;
            		}
HXDLIN( 155)		return ::tink::core::_Future::Future_Impl__obj::first(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,either,return )

::Dynamic Future_Impl__obj::_hx_and(::Dynamic a,::Dynamic b){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::tink::core::MPair _hx_run( ::Dynamic a1, ::Dynamic b1){
            			HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_161_and)
HXDLIN( 161)			 ::tink::core::MPair this1 =  ::tink::core::MPair_obj::__alloc( HX_CTX ,a1,b1);
HXDLIN( 161)			return this1;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_161_and)
HXDLIN( 161)		return ::tink::core::_Future::Future_Impl__obj::merge(a,b, ::Dynamic(new _hx_Closure_0()),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_hx_and,return )

::Dynamic Future_Impl__obj::_tryFailingFlatMap(::Dynamic f, ::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,map) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::Outcome o){
            			HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_164__tryFailingFlatMap)
HXDLIN( 164)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE( 165)					 ::Dynamic d = o->_hx_getObject(0);
HXDLIN( 165)					return map(d);
            				}
            				break;
            				case (int)1: {
HXLINE( 166)					 ::Dynamic f1 = o->_hx_getObject(0);
HXDLIN( 166)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Failure(f1)));
            				}
            				break;
            			}
HXLINE( 164)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_164__tryFailingFlatMap)
HXDLIN( 164)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(f, ::Dynamic(new _hx_Closure_0(map)));
HXDLIN( 164)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_tryFailingFlatMap,return )

::Dynamic Future_Impl__obj::_tryFlatMap(::Dynamic f, ::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,map) HXARGC(1)
            		::Dynamic _hx_run( ::tink::core::Outcome o){
            			HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_170__tryFlatMap)
HXDLIN( 170)			switch((int)(o->_hx_getIndex())){
            				case (int)0: {
HXLINE( 171)					 ::Dynamic d = o->_hx_getObject(0);
HXDLIN( 171)					::Dynamic ret1 = ::tink::core::_Future::FutureObject_obj::map(map(d),::tink::core::Outcome_obj::Success_dyn());
HXDLIN( 171)					return ::tink::core::_Future::FutureObject_obj::gather(ret1);
            				}
            				break;
            				case (int)1: {
HXLINE( 172)					 ::Dynamic f1 = o->_hx_getObject(0);
HXDLIN( 172)					return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Outcome_obj::Failure(f1)));
            				}
            				break;
            			}
HXLINE( 170)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_170__tryFlatMap)
HXDLIN( 170)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(f, ::Dynamic(new _hx_Closure_0(map)));
HXDLIN( 170)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_tryFlatMap,return )

::Dynamic Future_Impl__obj::_tryFailingMap(::Dynamic f, ::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,map) HXARGC(1)
            		 ::tink::core::Outcome _hx_run( ::tink::core::Outcome o){
            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_176__tryFailingMap)
HXDLIN( 176)			return ::tink::core::OutcomeTools_obj::flatMap(o,::tink::core::_Outcome::OutcomeMapper_Impl__obj::withSameError(map));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_176__tryFailingMap)
HXDLIN( 176)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(f, ::Dynamic(new _hx_Closure_0(map)));
HXDLIN( 176)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_tryFailingMap,return )

::Dynamic Future_Impl__obj::_tryMap(::Dynamic f, ::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,map) HXARGC(1)
            		 ::tink::core::Outcome _hx_run( ::tink::core::Outcome o){
            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_179__tryMap)
HXDLIN( 179)			return ::tink::core::OutcomeTools_obj::map(o,map);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_179__tryMap)
HXDLIN( 179)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(f, ::Dynamic(new _hx_Closure_0(map)));
HXDLIN( 179)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_tryMap,return )

::Dynamic Future_Impl__obj::_flatMap(::Dynamic f, ::Dynamic map){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_182__flatMap)
HXDLIN( 182)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::flatMap(f,map);
HXDLIN( 182)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_flatMap,return )

::Dynamic Future_Impl__obj::_map(::Dynamic f, ::Dynamic map){
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_185__map)
HXDLIN( 185)		::Dynamic ret = ::tink::core::_Future::FutureObject_obj::map(f,map);
HXDLIN( 185)		return ::tink::core::_Future::FutureObject_obj::gather(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,_map,return )

 ::tink::core::FutureTrigger Future_Impl__obj::trigger(){
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_191_trigger)
HXDLIN( 191)		return  ::tink::core::FutureTrigger_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Future_Impl__obj,trigger,return )

::Dynamic Future_Impl__obj::delay(int ms,::Dynamic value){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,int,ms,::Dynamic,value) HXARGC(1)
            		void _hx_run( ::Dynamic cb){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Dynamic,value, ::Dynamic,cb) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_194_delay)
HXDLIN( 194)				cb(::tink::core::_Lazy::LazyObject_obj::get(value));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_194_delay)
HXDLIN( 194)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(value,cb)),ms);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_194_delay)
HXDLIN( 194)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_1(ms,value)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Future_Impl__obj,delay,return )


Future_Impl__obj::Future_Impl__obj()
{
}

bool Future_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lazy") ) { outValue = lazy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sync") ) { outValue = sync_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_map") ) { outValue = _map_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { outValue = first_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofAny") ) { outValue = ofAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"async") ) { outValue = async_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delay") ) { outValue = delay_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ofMany") ) { outValue = ofMany_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"either") ) { outValue = either_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_tryMap") ) { outValue = _tryMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trigger") ) { outValue = trigger_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromMany") ) { outValue = fromMany_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_flatMap") ) { outValue = _flatMap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"asPromise") ) { outValue = asPromise_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_tryFlatMap") ) { outValue = _tryFlatMap_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_tryFailingMap") ) { outValue = _tryFailingMap_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_tryFailingFlatMap") ) { outValue = _tryFailingFlatMap_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Future_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Future_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Dynamic */ ,(void *) &Future_Impl__obj::_hx_NULL,HX_("NULL",87,66,cf,33)},
	{hx::fsObject /* ::Dynamic */ ,(void *) &Future_Impl__obj::NOISE,HX_("NOISE",7a,c7,b0,1d)},
	{hx::fsObject /* ::Dynamic */ ,(void *) &Future_Impl__obj::NEVER,HX_("NEVER",6c,76,1e,17)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Future_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Future_Impl__obj::_hx_NULL,"NULL");
	HX_MARK_MEMBER_NAME(Future_Impl__obj::NOISE,"NOISE");
	HX_MARK_MEMBER_NAME(Future_Impl__obj::NEVER,"NEVER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Future_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Future_Impl__obj::_hx_NULL,"NULL");
	HX_VISIT_MEMBER_NAME(Future_Impl__obj::NOISE,"NOISE");
	HX_VISIT_MEMBER_NAME(Future_Impl__obj::NEVER,"NEVER");
};

#endif

hx::Class Future_Impl__obj::__mClass;

static ::String Future_Impl__obj_sStaticFields[] = {
	HX_("NULL",87,66,cf,33),
	HX_("NOISE",7a,c7,b0,1d),
	HX_("NEVER",6c,76,1e,17),
	HX_("_new",61,15,1f,3f),
	HX_("first",30,78,9d,00),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("next",f3,84,02,49),
	HX_("merge",b8,a2,c6,05),
	HX_("flatten",c4,ab,fb,e6),
	HX_("ofAny",15,da,17,2d),
	HX_("asPromise",c9,02,5d,64),
	HX_("ofMany",56,a1,ab,4f),
	HX_("fromMany",29,0b,22,a6),
	HX_("lazy",74,10,ad,47),
	HX_("sync",5b,ba,5f,4c),
	HX_("async",3c,ff,3d,26),
	HX_("or",23,61,00,00),
	HX_("either",45,5d,1a,24),
	HX_("and",d7,fa,49,00),
	HX_("_tryFailingFlatMap",5b,9a,60,80),
	HX_("_tryFlatMap",87,09,d0,a0),
	HX_("_tryFailingMap",94,38,5b,22),
	HX_("_tryMap",c0,a1,c0,c3),
	HX_("_flatMap",e4,69,96,20),
	HX_("_map",9d,4f,1e,3f),
	HX_("trigger",38,55,df,25),
	HX_("delay",83,d7,26,d7),
	::String(null())
};

void Future_Impl__obj::__register()
{
	Future_Impl__obj _hx_dummy;
	Future_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Future.Future_Impl_",22,b4,35,d2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Future_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Future_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Future_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Future_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Future_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Future_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Future_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Future_Impl__obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_13_boot)
HXDLIN(  13)			 ::Dynamic v = null();
HXDLIN(  13)			return  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,v));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_13_boot)
HXDLIN(  13)		_hx_NULL =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_589b450cd6df12cf_14_boot)
HXDLIN(  14)		NOISE =  ::tink::core::_Future::SyncFuture_obj::__alloc( HX_CTX , ::tink::core::_Lazy::LazyConst_obj::__alloc( HX_CTX ,::tink::core::Noise_obj::Noise_dyn()));
            	}
{
            	HX_STACKFRAME(&_hx_pos_589b450cd6df12cf_15_boot)
HXDLIN(  15)		NEVER = ::tink::core::_Future::NeverFuture_obj::inst;
            	}
}

} // end namespace tink
} // end namespace core
} // end namespace _Future
