// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_tink_core__Lazy_LazyConst
#include <tink/core/_Lazy/LazyConst.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyFunc
#include <tink/core/_Lazy/LazyFunc.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_34_new,"tink.core._Lazy.LazyConst","new",0xc0af85d3,"tink.core._Lazy.LazyConst.new","tink/core/Lazy.hx",34,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_37_get,"tink.core._Lazy.LazyConst","get",0xc0aa3609,"tink.core._Lazy.LazyConst.get","tink/core/Lazy.hx",37,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_40_map,"tink.core._Lazy.LazyConst","map",0xc0aec00f,"tink.core._Lazy.LazyConst.map","tink/core/Lazy.hx",40,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_39_map,"tink.core._Lazy.LazyConst","map",0xc0aec00f,"tink.core._Lazy.LazyConst.map","tink/core/Lazy.hx",39,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_43_flatMap,"tink.core._Lazy.LazyConst","flatMap",0x2eccfb56,"tink.core._Lazy.LazyConst.flatMap","tink/core/Lazy.hx",43,0x92445137)
HX_LOCAL_STACK_FRAME(_hx_pos_01e63ab033e6e3e7_42_flatMap,"tink.core._Lazy.LazyConst","flatMap",0x2eccfb56,"tink.core._Lazy.LazyConst.flatMap","tink/core/Lazy.hx",42,0x92445137)
namespace tink{
namespace core{
namespace _Lazy{

void LazyConst_obj::__construct( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_34_new)
HXDLIN(  34)		this->value = value;
            	}

Dynamic LazyConst_obj::__CreateEmpty() { return new LazyConst_obj; }

void *LazyConst_obj::_hx_vtable = 0;

Dynamic LazyConst_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LazyConst_obj > _hx_result = new LazyConst_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LazyConst_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x780d796d;
}

static ::tink::core::_Lazy::LazyObject_obj _hx_tink_core__Lazy_LazyConst__hx_tink_core__Lazy_LazyObject= {
	(  ::Dynamic (hx::Object::*)())&::tink::core::_Lazy::LazyConst_obj::get,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Lazy::LazyConst_obj::map,
	( ::Dynamic (hx::Object::*)( ::Dynamic))&::tink::core::_Lazy::LazyConst_obj::flatMap,
};

void *LazyConst_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xe1200775: return &_hx_tink_core__Lazy_LazyConst__hx_tink_core__Lazy_LazyObject;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic LazyConst_obj::get(){
            	HX_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_37_get)
HXDLIN(  37)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyConst_obj,get,return )

::Dynamic LazyConst_obj::map( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::tink::core::_Lazy::LazyConst,_gthis, ::Dynamic,f) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_40_map)
HXLINE(  40)			return f(_gthis->value);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_39_map)
HXDLIN(  39)		 ::tink::core::_Lazy::LazyConst _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  40)		return  ::tink::core::_Lazy::LazyFunc_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_gthis,f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyConst_obj,map,return )

::Dynamic LazyConst_obj::flatMap( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::tink::core::_Lazy::LazyConst,_gthis, ::Dynamic,f) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_43_flatMap)
HXLINE(  43)			return ::tink::core::_Lazy::LazyObject_obj::get(f(_gthis->value));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_01e63ab033e6e3e7_42_flatMap)
HXDLIN(  42)		 ::tink::core::_Lazy::LazyConst _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  43)		return  ::tink::core::_Lazy::LazyFunc_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_gthis,f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyConst_obj,flatMap,return )


hx::ObjectPtr< LazyConst_obj > LazyConst_obj::__new( ::Dynamic value) {
	hx::ObjectPtr< LazyConst_obj > __this = new LazyConst_obj();
	__this->__construct(value);
	return __this;
}

hx::ObjectPtr< LazyConst_obj > LazyConst_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic value) {
	LazyConst_obj *__this = (LazyConst_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LazyConst_obj), true, "tink.core._Lazy.LazyConst"));
	*(void **)__this = LazyConst_obj::_hx_vtable;
	__this->__construct(value);
	return __this;
}

LazyConst_obj::LazyConst_obj()
{
}

void LazyConst_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyConst);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void LazyConst_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
}

hx::Val LazyConst_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LazyConst_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyConst_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LazyConst_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LazyConst_obj,value),HX_("value",71,7f,b8,31)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LazyConst_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyConst_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("get",96,80,4e,00),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	::String(null()) };

hx::Class LazyConst_obj::__mClass;

void LazyConst_obj::__register()
{
	LazyConst_obj _hx_dummy;
	LazyConst_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core._Lazy.LazyConst",61,a0,c5,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LazyConst_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LazyConst_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyConst_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyConst_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
} // end namespace _Lazy
