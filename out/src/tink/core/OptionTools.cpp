// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_tink_core_OptionIter
#include <tink/core/OptionIter.h>
#endif
#ifndef INCLUDED_tink_core_OptionTools
#include <tink/core/OptionTools.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Lazy_LazyObject
#include <tink/core/_Lazy/LazyObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_11_force,"tink.core.OptionTools","force",0xc8d072f0,"tink.core.OptionTools.force","tink/core/Option.hx",11,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_22_or,"tink.core.OptionTools","or",0xa70bfafe,"tink.core.OptionTools.or","tink/core/Option.hx",22,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_31_orNull,"tink.core.OptionTools","orNull",0x29401ca5,"tink.core.OptionTools.orNull","tink/core/Option.hx",31,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_40_filter,"tink.core.OptionTools","filter",0x75424313,"tink.core.OptionTools.filter","tink/core/Option.hx",40,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_49_satisfies,"tink.core.OptionTools","satisfies",0xf143c186,"tink.core.OptionTools.satisfies","tink/core/Option.hx",49,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_58_equals,"tink.core.OptionTools","equals",0xb000119a,"tink.core.OptionTools.equals","tink/core/Option.hx",58,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_65_map,"tink.core.OptionTools","map",0x836e1061,"tink.core.OptionTools.map","tink/core/Option.hx",65,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_75_flatMap,"tink.core.OptionTools","flatMap",0x024fdca8,"tink.core.OptionTools.flatMap","tink/core/Option.hx",75,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_85_iterator,"tink.core.OptionTools","iterator",0x7bbb3a09,"tink.core.OptionTools.iterator","tink/core/Option.hx",85,0xcd41da16)
HX_LOCAL_STACK_FRAME(_hx_pos_a36a8944ac1e52bc_92_toArray,"tink.core.OptionTools","toArray",0x0d858663,"tink.core.OptionTools.toArray","tink/core/Option.hx",92,0xcd41da16)
namespace tink{
namespace core{

void OptionTools_obj::__construct() { }

Dynamic OptionTools_obj::__CreateEmpty() { return new OptionTools_obj; }

void *OptionTools_obj::_hx_vtable = 0;

Dynamic OptionTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OptionTools_obj > _hx_result = new OptionTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OptionTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04bf7e55;
}

 ::Dynamic OptionTools_obj::force( ::haxe::ds::Option o, ::Dynamic pos){
            	HX_GC_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_11_force)
HXDLIN(  11)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  12)			 ::Dynamic v = o->_hx_getObject(0);
HXLINE(  13)			return v;
            		}
            		else {
HXLINE(  15)			HX_STACK_DO_THROW( ::tink::core::TypedError_obj::__alloc( HX_CTX ,404,HX_("Some value expected but none found",46,d2,25,09),pos));
            		}
HXLINE(  11)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,force,return )

 ::Dynamic OptionTools_obj::_hx_or( ::haxe::ds::Option o,::Dynamic l){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_22_or)
HXDLIN(  22)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  23)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  23)			return v;
            		}
            		else {
HXLINE(  24)			return ::tink::core::_Lazy::LazyObject_obj::get(l);
            		}
HXLINE(  22)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,_hx_or,return )

 ::Dynamic OptionTools_obj::orNull( ::haxe::ds::Option o){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_31_orNull)
HXDLIN(  31)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  32)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  32)			return v;
            		}
            		else {
HXLINE(  33)			return null();
            		}
HXLINE(  31)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OptionTools_obj,orNull,return )

 ::haxe::ds::Option OptionTools_obj::filter( ::haxe::ds::Option o, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_40_filter)
HXDLIN(  40)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  41)			if (hx::IsEq( f(o->_hx_getObject(0)),false )) {
HXLINE(  41)				return ::haxe::ds::Option_obj::None_dyn();
            			}
            			else {
HXLINE(  42)				return o;
            			}
            		}
            		else {
HXLINE(  42)			return o;
            		}
HXLINE(  40)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,filter,return )

bool OptionTools_obj::satisfies( ::haxe::ds::Option o, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_49_satisfies)
HXDLIN(  49)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  50)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  50)			return ( (bool)(f(v)) );
            		}
            		else {
HXLINE(  51)			return false;
            		}
HXLINE(  49)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,satisfies,return )

bool OptionTools_obj::equals( ::haxe::ds::Option o, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_58_equals)
HXDLIN(  58)		if ((o->_hx_getIndex() == 0)) {
HXDLIN(  58)			 ::Dynamic v1 = o->_hx_getObject(0);
HXDLIN(  58)			return hx::IsEq( v1,v );
            		}
            		else {
HXDLIN(  58)			return false;
            		}
HXDLIN(  58)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,equals,return )

 ::haxe::ds::Option OptionTools_obj::map( ::haxe::ds::Option o, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_65_map)
HXDLIN(  65)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  66)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  66)			return ::haxe::ds::Option_obj::Some(f(v));
            		}
            		else {
HXLINE(  67)			return ::haxe::ds::Option_obj::None_dyn();
            		}
HXLINE(  65)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,map,return )

 ::haxe::ds::Option OptionTools_obj::flatMap( ::haxe::ds::Option o, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_75_flatMap)
HXDLIN(  75)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  76)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  76)			return f(v);
            		}
            		else {
HXLINE(  77)			return ::haxe::ds::Option_obj::None_dyn();
            		}
HXLINE(  75)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(OptionTools_obj,flatMap,return )

 ::tink::core::OptionIter OptionTools_obj::iterator( ::haxe::ds::Option o){
            	HX_GC_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_85_iterator)
HXDLIN(  85)		return  ::tink::core::OptionIter_obj::__alloc( HX_CTX ,o);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OptionTools_obj,iterator,return )

::cpp::VirtualArray OptionTools_obj::toArray( ::haxe::ds::Option o){
            	HX_STACKFRAME(&_hx_pos_a36a8944ac1e52bc_92_toArray)
HXDLIN(  92)		if ((o->_hx_getIndex() == 0)) {
HXLINE(  93)			 ::Dynamic v = o->_hx_getObject(0);
HXDLIN(  93)			return ::cpp::VirtualArray_obj::__new(1)->init(0,v);
            		}
            		else {
HXLINE(  94)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(  92)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OptionTools_obj,toArray,return )


OptionTools_obj::OptionTools_obj()
{
}

bool OptionTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"force") ) { outValue = force_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"orNull") ) { outValue = orNull_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"satisfies") ) { outValue = satisfies_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *OptionTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OptionTools_obj_sStaticStorageInfo = 0;
#endif

hx::Class OptionTools_obj::__mClass;

static ::String OptionTools_obj_sStaticFields[] = {
	HX_("force",eb,b1,94,04),
	HX_("or",23,61,00,00),
	HX_("orNull",4a,f9,32,39),
	HX_("filter",b8,1f,35,85),
	HX_("satisfies",01,9a,92,bc),
	HX_("equals",3f,ee,f2,bf),
	HX_("map",9c,0a,53,00),
	HX_("flatMap",63,10,de,e6),
	HX_("iterator",ee,49,9a,93),
	HX_("toArray",1e,ba,13,f2),
	::String(null())
};

void OptionTools_obj::__register()
{
	OptionTools_obj _hx_dummy;
	OptionTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("tink.core.OptionTools",b3,df,1d,26);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OptionTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OptionTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< OptionTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tink
} // end namespace core
