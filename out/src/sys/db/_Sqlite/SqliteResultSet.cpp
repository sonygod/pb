// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_sys_db_ResultSet
#include <sys/db/ResultSet.h>
#endif
#ifndef INCLUDED_sys_db__Sqlite_SqliteResultSet
#include <sys/db/_Sqlite/SqliteResultSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c51679094d54316_116_new,"sys.db._Sqlite.SqliteResultSet","new",0x31627399,"sys.db._Sqlite.SqliteResultSet.new","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/db/Sqlite.hx",116,0xf219dfa9)
HX_LOCAL_STACK_FRAME(_hx_pos_6c51679094d54316_139_hasNext,"sys.db._Sqlite.SqliteResultSet","hasNext",0x0ab9d926,"sys.db._Sqlite.SqliteResultSet.hasNext","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/db/Sqlite.hx",139,0xf219dfa9)
HX_LOCAL_STACK_FRAME(_hx_pos_6c51679094d54316_147_next,"sys.db._Sqlite.SqliteResultSet","next",0x04c2b39a,"sys.db._Sqlite.SqliteResultSet.next","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/db/Sqlite.hx",147,0xf219dfa9)
namespace sys{
namespace db{
namespace _Sqlite{

void SqliteResultSet_obj::__construct( ::Dynamic r){
            	HX_GC_STACKFRAME(&_hx_pos_6c51679094d54316_116_new)
HXLINE( 117)		this->cache =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 118)		this->r = r;
HXLINE( 119)		this->hasNext();
            	}

Dynamic SqliteResultSet_obj::__CreateEmpty() { return new SqliteResultSet_obj; }

void *SqliteResultSet_obj::_hx_vtable = 0;

Dynamic SqliteResultSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SqliteResultSet_obj > _hx_result = new SqliteResultSet_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SqliteResultSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4281b8d9;
}

static ::sys::db::ResultSet_obj _hx_sys_db__Sqlite_SqliteResultSet__hx_sys_db_ResultSet= {
};

void *SqliteResultSet_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc11b83fa: return &_hx_sys_db__Sqlite_SqliteResultSet__hx_sys_db_ResultSet;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool SqliteResultSet_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_6c51679094d54316_139_hasNext)
HXLINE( 140)		 ::Dynamic c = this->next();
HXLINE( 141)		if (hx::IsNull( c )) {
HXLINE( 142)			return false;
            		}
HXLINE( 143)		this->cache->push(c);
HXLINE( 144)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SqliteResultSet_obj,hasNext,return )

 ::Dynamic SqliteResultSet_obj::next(){
            	HX_STACKFRAME(&_hx_pos_6c51679094d54316_147_next)
HXLINE( 148)		 ::Dynamic c = this->cache->pop();
HXLINE( 149)		if (hx::IsNotNull( c )) {
HXLINE( 150)			return c;
            		}
HXLINE( 151)		return _hx_sqlite_result_next(this->r);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SqliteResultSet_obj,next,return )


hx::ObjectPtr< SqliteResultSet_obj > SqliteResultSet_obj::__new( ::Dynamic r) {
	hx::ObjectPtr< SqliteResultSet_obj > __this = new SqliteResultSet_obj();
	__this->__construct(r);
	return __this;
}

hx::ObjectPtr< SqliteResultSet_obj > SqliteResultSet_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic r) {
	SqliteResultSet_obj *__this = (SqliteResultSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SqliteResultSet_obj), true, "sys.db._Sqlite.SqliteResultSet"));
	*(void **)__this = SqliteResultSet_obj::_hx_vtable;
	__this->__construct(r);
	return __this;
}

SqliteResultSet_obj::SqliteResultSet_obj()
{
}

void SqliteResultSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SqliteResultSet);
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_END_CLASS();
}

void SqliteResultSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(cache,"cache");
}

hx::Val SqliteResultSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SqliteResultSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast<  ::haxe::ds::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SqliteResultSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("cache",42,9a,14,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SqliteResultSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SqliteResultSet_obj,r),HX_("r",72,00,00,00)},
	{hx::fsObject /*  ::haxe::ds::List */ ,(int)offsetof(SqliteResultSet_obj,cache),HX_("cache",42,9a,14,41)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SqliteResultSet_obj_sStaticStorageInfo = 0;
#endif

static ::String SqliteResultSet_obj_sMemberFields[] = {
	HX_("r",72,00,00,00),
	HX_("cache",42,9a,14,41),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

hx::Class SqliteResultSet_obj::__mClass;

void SqliteResultSet_obj::__register()
{
	SqliteResultSet_obj _hx_dummy;
	SqliteResultSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("sys.db._Sqlite.SqliteResultSet",27,b3,30,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SqliteResultSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SqliteResultSet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SqliteResultSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SqliteResultSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace db
} // end namespace _Sqlite
