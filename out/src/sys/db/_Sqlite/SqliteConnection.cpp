// Generated by Haxe 4.1.0-rc.1+0545ce110
#include <hxcpp.h>

#ifndef INCLUDED_sys_db_Connection
#include <sys/db/Connection.h>
#endif
#ifndef INCLUDED_sys_db_ResultSet
#include <sys/db/ResultSet.h>
#endif
#ifndef INCLUDED_sys_db__Sqlite_SqliteConnection
#include <sys/db/_Sqlite/SqliteConnection.h>
#endif
#ifndef INCLUDED_sys_db__Sqlite_SqliteResultSet
#include <sys/db/_Sqlite/SqliteResultSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_918b0b618e56d434_29_new,"sys.db._Sqlite.SqliteConnection","new",0xf8a8646e,"sys.db._Sqlite.SqliteConnection.new","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/db/Sqlite.hx",29,0xf219dfa9)
HX_LOCAL_STACK_FRAME(_hx_pos_918b0b618e56d434_37_request,"sys.db._Sqlite.SqliteConnection","request",0x544f925d,"sys.db._Sqlite.SqliteConnection.request","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/db/Sqlite.hx",37,0xf219dfa9)
namespace sys{
namespace db{
namespace _Sqlite{

void SqliteConnection_obj::__construct(::String file){
            	HX_STACKFRAME(&_hx_pos_918b0b618e56d434_29_new)
HXDLIN(  29)		this->c = _hx_sqlite_connect(file);
            	}

Dynamic SqliteConnection_obj::__CreateEmpty() { return new SqliteConnection_obj; }

void *SqliteConnection_obj::_hx_vtable = 0;

Dynamic SqliteConnection_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SqliteConnection_obj > _hx_result = new SqliteConnection_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SqliteConnection_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26824b8a;
}

static ::sys::db::Connection_obj _hx_sys_db__Sqlite_SqliteConnection__hx_sys_db_Connection= {
	( ::Dynamic (hx::Object::*)(::String))&::sys::db::_Sqlite::SqliteConnection_obj::request,
};

void *SqliteConnection_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x6e7a3d49: return &_hx_sys_db__Sqlite_SqliteConnection__hx_sys_db_Connection;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic SqliteConnection_obj::request(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_918b0b618e56d434_37_request)
HXDLIN(  37)		try {
            			HX_STACK_CATCHABLE(::String, 0);
HXLINE(  38)			return  ::sys::db::_Sqlite::SqliteResultSet_obj::__alloc( HX_CTX ,_hx_sqlite_request(this->c,s));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            				HX_STACK_BEGIN_CATCH
            				::String e = _hx_e;
HXLINE(  40)				HX_STACK_DO_THROW(((((HX_("Error while executing ",b5,68,57,8c) + s) + HX_(" (",08,1c,00,00)) + e) + HX_(")",29,00,00,00)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  37)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SqliteConnection_obj,request,return )


hx::ObjectPtr< SqliteConnection_obj > SqliteConnection_obj::__new(::String file) {
	hx::ObjectPtr< SqliteConnection_obj > __this = new SqliteConnection_obj();
	__this->__construct(file);
	return __this;
}

hx::ObjectPtr< SqliteConnection_obj > SqliteConnection_obj::__alloc(hx::Ctx *_hx_ctx,::String file) {
	SqliteConnection_obj *__this = (SqliteConnection_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SqliteConnection_obj), true, "sys.db._Sqlite.SqliteConnection"));
	*(void **)__this = SqliteConnection_obj::_hx_vtable;
	__this->__construct(file);
	return __this;
}

SqliteConnection_obj::SqliteConnection_obj()
{
}

void SqliteConnection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SqliteConnection);
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_END_CLASS();
}

void SqliteConnection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(c,"c");
}

hx::Val SqliteConnection_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { return hx::Val( request_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SqliteConnection_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SqliteConnection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("c",63,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SqliteConnection_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SqliteConnection_obj,c),HX_("c",63,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SqliteConnection_obj_sStaticStorageInfo = 0;
#endif

static ::String SqliteConnection_obj_sMemberFields[] = {
	HX_("c",63,00,00,00),
	HX_("request",4f,df,84,44),
	::String(null()) };

hx::Class SqliteConnection_obj::__mClass;

void SqliteConnection_obj::__register()
{
	SqliteConnection_obj _hx_dummy;
	SqliteConnection_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("sys.db._Sqlite.SqliteConnection",7c,55,ee,d5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SqliteConnection_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SqliteConnection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SqliteConnection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SqliteConnection_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace db
} // end namespace _Sqlite
