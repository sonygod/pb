// Generated by Haxe 4.1.0-rc.1+0545ce110
#ifndef INCLUDED_gen_GenKLSFBytes
#define INCLUDED_gen_GenKLSFBytes

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(gen,GenKLSFBytes)

namespace gen{


class HXCPP_CLASS_ATTRIBUTES GenKLSFBytes_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GenKLSFBytes_obj OBJ_;
		GenKLSFBytes_obj();

	public:
		enum { _hx_ClassId = 0x77dac837 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="gen.GenKLSFBytes")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"gen.GenKLSFBytes"); }

		inline static hx::ObjectPtr< GenKLSFBytes_obj > __new() {
			hx::ObjectPtr< GenKLSFBytes_obj > __this = new GenKLSFBytes_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< GenKLSFBytes_obj > __alloc(hx::Ctx *_hx_ctx) {
			GenKLSFBytes_obj *__this = (GenKLSFBytes_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GenKLSFBytes_obj), false, "gen.GenKLSFBytes"));
			*(void **)__this = GenKLSFBytes_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GenKLSFBytes_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GenKLSFBytes",e7,18,c1,44); }

		static void main();
		static ::Dynamic main_dyn();

		static void main2();
		static ::Dynamic main2_dyn();

		static void genMulThread();
		static ::Dynamic genMulThread_dyn();

};

} // end namespace gen

#endif /* INCLUDED_gen_GenKLSFBytes */ 
