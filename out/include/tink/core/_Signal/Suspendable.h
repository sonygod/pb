// Generated by Haxe 4.1.0-rc.1+0545ce110
#ifndef INCLUDED_tink_core__Signal_Suspendable
#define INCLUDED_tink_core__Signal_Suspendable

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_tink_core_SignalObject
#include <tink/core/SignalObject.h>
#endif
HX_DECLARE_CLASS2(tink,core,LinkObject)
HX_DECLARE_CLASS2(tink,core,SignalObject)
HX_DECLARE_CLASS2(tink,core,SignalTrigger)
HX_DECLARE_CLASS3(tink,core,_Signal,Suspendable)

namespace tink{
namespace core{
namespace _Signal{


class HXCPP_CLASS_ATTRIBUTES Suspendable_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Suspendable_obj OBJ_;
		Suspendable_obj();

	public:
		enum { _hx_ClassId = 0x34980dc0 };

		void __construct( ::Dynamic activate);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="tink.core._Signal.Suspendable")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"tink.core._Signal.Suspendable"); }
		static hx::ObjectPtr< Suspendable_obj > __new( ::Dynamic activate);
		static hx::ObjectPtr< Suspendable_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic activate);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Suspendable_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Suspendable",f6,a2,5d,aa); }

		 ::tink::core::SignalTrigger trigger;
		 ::Dynamic activate;
		Dynamic activate_dyn() { return activate;}
		 ::Dynamic suspend;
		Dynamic suspend_dyn() { return suspend;}
		::Dynamic check;
		bool killed;
		void kill();
		::Dynamic kill_dyn();

		::Dynamic handle( ::Dynamic cb);
		::Dynamic handle_dyn();

};

} // end namespace tink
} // end namespace core
} // end namespace _Signal

#endif /* INCLUDED_tink_core__Signal_Suspendable */ 
