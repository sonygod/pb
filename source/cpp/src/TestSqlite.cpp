// Generated by Haxe 4.1.0-rc.1+0d88c583b
#include <hxcpp.h>

#ifndef INCLUDED_CustomTrace
#include <CustomTrace.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Permutation
#include <Permutation.h>
#endif
#ifndef INCLUDED_PermutationBit
#include <PermutationBit.h>
#endif
#ifndef INCLUDED_TestSqlite
#include <TestSqlite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_47_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",47,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_65_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",65,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_24_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",24,0x10c96ea0)
static const int _hx_array_data_62aa72de_5[] = {
	(int)1,(int)2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_23_boot,"TestSqlite","boot",0xe4fc9bc2,"TestSqlite.boot","TestSqlite.hx",23,0x10c96ea0)

void TestSqlite_obj::__construct() { }

Dynamic TestSqlite_obj::__CreateEmpty() { return new TestSqlite_obj; }

void *TestSqlite_obj::_hx_vtable = 0;

Dynamic TestSqlite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSqlite_obj > _hx_result = new TestSqlite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestSqlite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62aa72de;
}

void TestSqlite_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,Float,now) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes d){
            			HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_47_main)
HXLINE(  50)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  50)			Float _hx_tmp1 = ::Date_obj::now()->getTime();
HXDLIN(  50)			_hx_tmp((HX_("Json.stringify(d)",68,7e,7d,86) + (_hx_tmp1 - now)),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),50,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  55)			::sys::io::File_obj::saveBytes(HX_("c:/bytes.data",e5,a8,f1,e4),d);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,Float,now1) HXARGC(1)
            		void _hx_run(::Array< ::Dynamic> d1){
            			HX_GC_STACKFRAME(&_hx_pos_ed116a5ecba4f615_65_main)
HXLINE(  66)			::haxe::Log_obj::trace(d1,hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),66,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  67)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  67)			Float _hx_tmp3 = ::Date_obj::now()->getTime();
HXDLIN(  67)			_hx_tmp2((HX_("Json.stringify(d)",68,7e,7d,86) + (_hx_tmp3 - now1)),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),67,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_ed116a5ecba4f615_24_main)
HXLINE(  25)		::CustomTrace_obj::init();
HXLINE(  27)		int max = 8;
HXLINE(  28)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(max);
HXLINE(  30)		{
HXLINE(  30)			int _g = 0;
HXDLIN(  30)			int _g1 = max;
HXDLIN(  30)			while((_g < _g1)){
HXLINE(  30)				_g = (_g + 1);
HXDLIN(  30)				int i = (_g - 1);
HXLINE(  31)				b->b[i] = ( (unsigned char)((i + 10)) );
            			}
            		}
HXLINE(  36)		 ::haxe::io::Bytes item = b;
HXLINE(  37)		int total = 1;
HXLINE(  38)		int i1 = b->length;
HXLINE(  39)		while((i1 > 0)){
HXLINE(  40)			int v = ( (int)(b->b->__get((i1 - 1))) );
HXLINE(  41)			total = (total * v);
HXLINE(  42)			i1 = (i1 - 1);
            		}
HXLINE(  44)		 ::haxe::io::Bytes v1 = ::haxe::io::Bytes_obj::alloc((total * max));
HXDLIN(  44)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  44)		::Array< ::Dynamic> this2 = this1;
HXDLIN(  44)		::Array< ::Dynamic> ret = this2;
HXDLIN(  44)		ret->__unsafe_set(0,v1);
HXDLIN(  44)		::Array< ::Dynamic> result = ret;
HXLINE(  45)		Float now = ::Date_obj::now()->getTime();
HXLINE(  46)		::haxe::Log_obj::trace(((HX_("now",16,d9,53,00) + total) + HX_(" max",84,de,79,15)),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),46,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  47)		 ::PermutationBit_obj::__alloc( HX_CTX ,item, ::Dynamic(new _hx_Closure_0(now)),result);
HXLINE(  61)		::Array< int > item1 = ::Array_obj< int >::fromData( _hx_array_data_62aa72de_5,2);
HXLINE(  62)		::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  62)		::Array< ::Dynamic> this4 = this3;
HXDLIN(  62)		::Array< ::Dynamic> ret1 = this4;
HXDLIN(  62)		ret1->__unsafe_set(0,::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  62)		::Array< ::Dynamic> result1 = ret1;
HXLINE(  63)		Float now1 = ::Date_obj::now()->getTime();
HXLINE(  64)		::haxe::Log_obj::trace(HX_("now",16,d9,53,00),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),64,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  65)		 ::Permutation_obj::__alloc( HX_CTX ,item1, ::Dynamic(new _hx_Closure_1(now1)),result1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TestSqlite_obj,main,(void))


TestSqlite_obj::TestSqlite_obj()
{
}

bool TestSqlite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TestSqlite_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestSqlite_obj_sStaticStorageInfo = 0;
#endif

hx::Class TestSqlite_obj::__mClass;

static ::String TestSqlite_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void TestSqlite_obj::__register()
{
	TestSqlite_obj _hx_dummy;
	TestSqlite_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("TestSqlite",de,72,aa,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestSqlite_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestSqlite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TestSqlite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSqlite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSqlite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestSqlite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_23_boot)
HXDLIN(  23)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("await",56,9f,d0,28),null()))));
            	}
}

