// Generated by Haxe 4.0.0+ef18b627e
#include <hxcpp.h>

#ifndef INCLUDED_CustomTrace
#include <CustomTrace.h>
#endif
#ifndef INCLUDED_TestSqlite
#include <TestSqlite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_34_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",34,0x10c96ea0)

void TestSqlite_obj::__construct() { }

Dynamic TestSqlite_obj::__CreateEmpty() { return new TestSqlite_obj; }

void *TestSqlite_obj::_hx_vtable = 0;

Dynamic TestSqlite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSqlite_obj > _hx_result = new TestSqlite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestSqlite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62aa72de;
}

void TestSqlite_obj::main(){
            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_34_main)
HXLINE(  35)		::CustomTrace_obj::init();
HXLINE(  36)		::haxe::Log_obj::trace(HX_("f",66,00,00,00),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),36,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  37)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc((int)1073741824);
HXLINE(  40)		::sys::io::File_obj::saveBytes(HX_("I:/testbyte.data",c0,40,d1,9e),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TestSqlite_obj,main,(void))


TestSqlite_obj::TestSqlite_obj()
{
}

bool TestSqlite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TestSqlite_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestSqlite_obj_sStaticStorageInfo = 0;
#endif

hx::Class TestSqlite_obj::__mClass;

static ::String TestSqlite_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void TestSqlite_obj::__register()
{
	TestSqlite_obj _hx_dummy;
	TestSqlite_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("TestSqlite",de,72,aa,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestSqlite_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestSqlite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TestSqlite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSqlite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSqlite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

