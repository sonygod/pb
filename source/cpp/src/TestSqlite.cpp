// Generated by Haxe 4.0.0+ef18b627e
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_CustomTrace
#include <CustomTrace.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TestSqlite
#include <TestSqlite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tink_await_OutcomeTools
#include <tink/await/OutcomeTools.h>
#endif
#ifndef INCLUDED_tink_core_LinkObject
#include <tink/core/LinkObject.h>
#endif
#ifndef INCLUDED_tink_core_Outcome
#include <tink/core/Outcome.h>
#endif
#ifndef INCLUDED_tink_core_TypedError
#include <tink/core/TypedError.h>
#endif
#ifndef INCLUDED_tink_core__Future_FutureObject
#include <tink/core/_Future/FutureObject.h>
#endif
#ifndef INCLUDED_tink_core__Future_Future_Impl_
#include <tink/core/_Future/Future_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_35_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",35,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_e32fe090a8984bfa_88_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","tink/await/AsyncField.hx",88,0x719048ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_51_test2,"TestSqlite","test2",0xcea90610,"TestSqlite.test2","TestSqlite.hx",51,0x10c96ea0)
static const int _hx_array_data_62aa72de_6[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_62_test2,"TestSqlite","test2",0xcea90610,"TestSqlite.test2","TestSqlite.hx",62,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_34_boot,"TestSqlite","boot",0xe4fc9bc2,"TestSqlite.boot","TestSqlite.hx",34,0x10c96ea0)

void TestSqlite_obj::__construct() { }

Dynamic TestSqlite_obj::__CreateEmpty() { return new TestSqlite_obj; }

void *TestSqlite_obj::_hx_vtable = 0;

Dynamic TestSqlite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSqlite_obj > _hx_result = new TestSqlite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestSqlite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62aa72de;
}

::Dynamic TestSqlite_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::Dynamic _hx___return){
            			HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_35_main)
HXDLIN(  35)			try {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,Float,n1, ::haxe::io::Bytes,b, ::Dynamic,_hx___return) HXARGC(1)
            				void _hx_run(bool _hx___t0){
            					HX_STACKFRAME(&_hx_pos_e32fe090a8984bfa_88_main)
HXLINE(  88)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  89)						bool _hx___t0_result;
HXLINE(  90)						{
HXLINE(  90)							 ::tink::core::Outcome _g = ::tink::await::OutcomeTools_obj::getOutcome(null(),_hx___t0);
HXDLIN(  90)							switch((int)(_g->_hx_getIndex())){
            								case (int)0: {
HXLINE(  91)									bool v = ( (bool)(_g->_hx_getObject(0)) );
HXDLIN(  91)									_hx___t0_result = v;
            								}
            								break;
            								case (int)1: {
HXLINE(  92)									 ::tink::core::TypedError e = ( ( ::tink::core::TypedError)(_g->_hx_getObject(0)) );
HXLINE(  30)									_hx___return(::tink::core::Outcome_obj::Failure(e));
HXLINE(  92)									return;
            								}
            								break;
            							}
            						}
HXLINE(  30)						{
HXLINE(  41)							bool result = _hx___t0_result;
HXLINE(  43)							Float n2 = ::Date_obj::now()->getTime();
HXLINE(  45)							::haxe::Log_obj::trace((n2 - n1),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),45,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  47)							::sys::io::File_obj::saveBytes(HX_("./testbytes.data",e0,73,68,2b),b);
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
HXLINE(  88)							_hx___return(::tink::core::Outcome_obj::Failure(e1));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  36)				::CustomTrace_obj::init();
HXLINE(  38)				::haxe::Log_obj::trace(HX_W(u"\u5f00\u59cb\u8ba1\u7b97",7df5,8c72),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),38,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  39)				Float n1 = ::Date_obj::now()->getTime();
HXLINE(  40)				 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc((int)1064304640);
HXLINE(  41)				::tink::core::_Future::FutureObject_obj::handle(::TestSqlite_obj::test2(b), ::Dynamic(new _hx_Closure_0(n1,b,_hx___return)));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e2 = _hx_e;
HXDLIN(  35)					_hx___return(::tink::core::Outcome_obj::Failure(e2));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_35_main)
HXDLIN(  35)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_1()),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TestSqlite_obj,main,return )

::Dynamic TestSqlite_obj::test2( ::haxe::io::Bytes b){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::haxe::io::Bytes,b) HXARGC(1)
            		void _hx_run( ::Dynamic callBack){
            			HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_51_test2)
HXLINE(  54)			::Array< int > index = ::Array_obj< int >::fromData( _hx_array_data_62aa72de_6,1);
HXLINE(  55)			int total = 16;
HXLINE(  56)			int sum = (int)1064304640;
HXLINE(  58)			int base = ::Std_obj::_hx_int((( (Float)(sum) ) / ( (Float)(total) )));
HXLINE(  60)			::haxe::Log_obj::trace((((((HX_("sum=",52,b0,5c,4c) + sum) + HX_(" total=",19,d0,85,ca)) + total) + HX_(" base=",ec,b2,25,79)) + base),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),60,HX_("TestSqlite",de,72,aa,62),HX_("test2",a0,7f,95,0d)));
HXLINE(  61)			{
HXLINE(  61)				int _g = 0;
HXDLIN(  61)				int _g1 = total;
HXDLIN(  61)				while((_g < _g1)){
            					HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,int,base, ::haxe::io::Bytes,b,::Array< int >,index, ::Dynamic,callBack,int,i) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_62_test2)
HXLINE(  63)						int start = (i * base);
HXLINE(  64)						int end = ((i + 1) * base);
HXLINE(  66)						while((start < end)){
HXLINE(  67)							b->b[start] = ( (unsigned char)((1 + ::Math_obj::floor((( (Float)(10) ) * ::Math_obj::random())))) );
HXLINE(  68)							start = (start + 1);
            						}
HXLINE(  71)						index[0]++;
HXLINE(  73)						if ((index->__get(0) == 8)) {
HXLINE(  74)							callBack(true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  61)					_g = (_g + 1);
HXDLIN(  61)					int i = (_g - 1);
HXLINE(  62)					::haxe::MainLoop_obj::addThread( ::Dynamic(new _hx_Closure_0(base,b,index,callBack,i)));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_51_test2)
HXDLIN(  51)		return ::tink::core::_Future::Future_Impl__obj::async( ::Dynamic(new _hx_Closure_1(b)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TestSqlite_obj,test2,return )


TestSqlite_obj::TestSqlite_obj()
{
}

bool TestSqlite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"test2") ) { outValue = test2_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TestSqlite_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestSqlite_obj_sStaticStorageInfo = 0;
#endif

hx::Class TestSqlite_obj::__mClass;

static ::String TestSqlite_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	HX_("test2",a0,7f,95,0d),
	::String(null())
};

void TestSqlite_obj::__register()
{
	TestSqlite_obj _hx_dummy;
	TestSqlite_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("TestSqlite",de,72,aa,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestSqlite_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestSqlite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TestSqlite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSqlite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSqlite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestSqlite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_34_boot)
HXDLIN(  34)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("await",56,9f,d0,28),null())))
            			->setFixed(1,HX_("statics",05,3c,65,36), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("main",39,38,56,48), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("async",3c,ff,3d,26),null()))))));
            	}
}

