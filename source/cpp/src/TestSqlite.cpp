// Generated by Haxe 4.0.0-rc.5+b1fb4afca
#include <hxcpp.h>

#ifndef INCLUDED_CustomTrace
#include <CustomTrace.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Permutation
#include <Permutation.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TestSqlite
#include <TestSqlite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_sys_db_Connection
#include <sys/db/Connection.h>
#endif
#ifndef INCLUDED_sys_db_ResultSet
#include <sys/db/ResultSet.h>
#endif
#ifndef INCLUDED_sys_db_Sqlite
#include <sys/db/Sqlite.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_33_computeAllChoices,"TestSqlite","computeAllChoices",0x90880f98,"TestSqlite.computeAllChoices","TestSqlite.hx",33,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_55_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",55,0x10c96ea0)
HX_LOCAL_STACK_FRAME(_hx_pos_ed116a5ecba4f615_70_main,"TestSqlite","main",0xec374fc9,"TestSqlite.main","TestSqlite.hx",70,0x10c96ea0)

void TestSqlite_obj::__construct() { }

Dynamic TestSqlite_obj::__CreateEmpty() { return new TestSqlite_obj; }

void *TestSqlite_obj::_hx_vtable = 0;

Dynamic TestSqlite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSqlite_obj > _hx_result = new TestSqlite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestSqlite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62aa72de;
}

void TestSqlite_obj::computeAllChoices(::Array< ::Dynamic> data,int n,int outLen,int startIndex,int m,::Array< int > arr,int arrIndex,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_33_computeAllChoices)
HXLINE(  34)		if ((m == 0)) {
HXLINE(  37)			( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->push(arr);
HXLINE(  39)			return;
            		}
HXLINE(  42)		int endIndex = (n - m);
HXLINE(  45)		int i = startIndex;
HXLINE(  47)		while((i <= endIndex)){
HXLINE(  48)			arr[arrIndex] = ( (::Array< int >)(_hx_array_unsafe_get(data,0)) )->__get(i);
HXLINE(  49)			::TestSqlite_obj::computeAllChoices(data,n,outLen,(i + 1),(m - 1),arr,(arrIndex + 1),result);
HXLINE(  51)			i = (i + 1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(TestSqlite_obj,computeAllChoices,(void))

void TestSqlite_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_ed116a5ecba4f615_55_main)
HXLINE(  56)		::CustomTrace_obj::init();
HXLINE(  58)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  58)		{
HXLINE(  58)			_g->push(1);
HXDLIN(  58)			_g->push(2);
HXDLIN(  58)			_g->push(3);
HXDLIN(  58)			_g->push(4);
HXDLIN(  58)			_g->push(5);
HXDLIN(  58)			_g->push(6);
HXDLIN(  58)			_g->push(7);
HXDLIN(  58)			_g->push(8);
HXDLIN(  58)			_g->push(9);
HXDLIN(  58)			_g->push(10);
HXDLIN(  58)			_g->push(11);
HXDLIN(  58)			_g->push(12);
HXDLIN(  58)			_g->push(13);
HXDLIN(  58)			_g->push(14);
HXDLIN(  58)			_g->push(15);
HXDLIN(  58)			_g->push(16);
HXDLIN(  58)			_g->push(17);
HXDLIN(  58)			_g->push(18);
HXDLIN(  58)			_g->push(19);
HXDLIN(  58)			_g->push(20);
            		}
HXDLIN(  58)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  58)		::Array< ::Dynamic> this2 = this1;
HXDLIN(  58)		::Array< ::Dynamic> ret = this2;
HXDLIN(  58)		ret->__unsafe_set(0,_g);
HXDLIN(  58)		::Array< ::Dynamic> data = ret;
HXLINE(  60)		::Array< int > arr = ::Array_obj< int >::__new(0);
HXLINE(  61)		::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(1);
HXDLIN(  61)		::Array< ::Dynamic> this4 = this3;
HXDLIN(  61)		::Array< ::Dynamic> ret1 = this4;
HXDLIN(  61)		ret1->__unsafe_set(0,::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  61)		::Array< ::Dynamic> result = ret1;
HXLINE(  63)		::TestSqlite_obj::computeAllChoices(data,( (::Array< int >)(_hx_array_unsafe_get(data,0)) )->length,8,0,8,arr,0,result);
HXLINE(  65)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  65)		::String _hx_tmp1 = (HX_("result=",c0,58,57,6b) + ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->length);
HXDLIN(  65)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),65,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  67)		int i = 0;
HXLINE(  68)		::Array< ::Dynamic> pArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  69)		while((i < ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->length)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> arr1){
            				HX_STACKFRAME(&_hx_pos_ed116a5ecba4f615_70_main)
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  70)			 ::Permutation p =  ::Permutation_obj::__alloc( HX_CTX ,( (::Array< ::Dynamic>)(_hx_array_unsafe_get(result,0)) )->__get(i).StaticCast< ::Array< int > >(), ::Dynamic(new _hx_Closure_0()));
HXLINE(  72)			if ((hx::Mod(i,100) == 0)) {
HXLINE(  73)				::haxe::Log_obj::trace(((HX_("finish",53,40,7f,86) + i) + HX_("\n",0a,00,00,00)),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),73,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
            			}
HXLINE(  75)			i = (i + 1);
HXLINE(  76)			p = null();
HXLINE(  78)			pArray->push(arr);
            		}
HXLINE(  81)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  81)		::String _hx_tmp3 = (HX_W(u"\u6211\u64cd\uff0c\u591a\u5c11\u65f6\u95f4",231a,810b) + ::Std_obj::string(pArray));
HXDLIN(  81)		_hx_tmp2(_hx_tmp3,hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),81,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE(  83)		 ::Dynamic replacer = null();
HXDLIN(  83)		::String space = null();
HXDLIN(  83)		::String x = ::haxe::format::JsonPrinter_obj::print(pArray,replacer,space);
HXLINE(  85)		::sys::io::File_obj::saveContent(HX_("./content.json",3e,db,b3,df),x);
HXLINE(  87)		::Dynamic cnx = ::sys::db::Sqlite_obj::open(HX_(":memory:",1f,b1,7f,18));
HXLINE(  89)		::sys::db::Connection_obj::request(cnx,HX_("PRAGMA synchronous = OFF;",6a,3c,ef,23));
HXLINE(  90)		::sys::db::Connection_obj::request(cnx,HX_("\r\n                CREATE TABLE IF NOT EXISTS fa_game (\r\n                    id integer NOT NULL PRIMARY KEY AUTOINCREMENT,\r\n                    us_id integer  NOT NULL DEFAULT 0,\r\n                    room_id integer  NOT NULL DEFAULT 1,\r\n                    round integer NOT NULL DEFAULT 0,\r\n                    coeds TEXT NOT NULL,\r\n                    win integer NOT NULL DEFAULT 0,\r\n                    lost integer NOT NULL DEFAULT 0,\r\n                    fk integer NOT NULL DEFAULT 0,\r\n                    time DATETIME NULL DEFAULT CURRENT_TIMESTAMP,\r\n                    times integer  NOT NULL,\r\n                    score integer NOT NULL DEFAULT 0,\r\n                    money integer NOT NULL DEFAULT 0,\r\n                    isBanker integer NOT NULL DEFAULT 0\r\n                )\r\n                ",07,6c,d3,d2));
HXLINE( 108)		::Array< ::Dynamic> allScores = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 110)		{
HXLINE( 110)			int _g1 = 0;
HXDLIN( 110)			while((_g1 < 4000)){
HXLINE( 110)				_g1 = (_g1 + 1);
HXDLIN( 110)				int i1 = (_g1 - 1);
HXLINE( 111)				allScores->push( ::Dynamic(hx::Anon_obj::Create(9)
            					->setFixed(0,HX_("roomID",b6,2a,db,c7),i1)
            					->setFixed(1,HX_("round",4e,f8,65,ed),i1)
            					->setFixed(2,HX_("fk",45,59,00,00),i1)
            					->setFixed(3,HX_("id",db,5b,00,00),i1)
            					->setFixed(4,HX_("key",9f,89,51,00),i1)
            					->setFixed(5,HX_("earnMoney",08,68,b9,04),1)
            					->setFixed(6,HX_("cards",a3,f8,1f,41),::Array_obj< int >::__new(3)->init(0,i1)->init(1,(i1 + 1))->init(2,(i1 + 2)))
            					->setFixed(7,HX_("time",0d,cc,fc,4c),::Date_obj::now())
            					->setFixed(8,HX_("loseMoney",2b,bc,74,7a),i1)));
            			}
            		}
HXLINE( 124)		::haxe::Log_obj::trace(allScores->length,hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),124,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE( 125)		::Array< ::String > arr2 = ::Array_obj< ::String >::__new(0);
HXLINE( 126)		{
HXLINE( 126)			int _g2 = 0;
HXDLIN( 126)			while((_g2 < allScores->length)){
HXLINE( 126)				 ::Dynamic p1 = allScores->__get(_g2);
HXDLIN( 126)				_g2 = (_g2 + 1);
HXLINE( 127)				::String q = ( (::String)(((((((HX_("INSERT INTO fa_game (us_id,room_id,round,coeds,win,lost,fk,time,times) VALUES(",f5,96,95,32) + p1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p1->__Field(HX_("roomID",b6,2a,db,c7),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p1->__Field(HX_("round",4e,f8,65,ed),hx::paccDynamic)) + HX_(",",2c,00,00,00))) );
HXDLIN( 127)				::String q1 = ((q + ::sys::db::Connection_obj::quote(cnx,( (::Array< int >)(p1->__Field(HX_("cards",a3,f8,1f,41),hx::paccDynamic)) )->join(HX_(",",2c,00,00,00)))) + HX_(",",2c,00,00,00));
HXDLIN( 127)				::String q2 = ( (::String)(((((((q1 + p1->__Field(HX_("earnMoney",08,68,b9,04),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p1->__Field(HX_("loseMoney",2b,bc,74,7a),hx::paccDynamic)) + HX_(" ,",0c,1c,00,00)) + p1->__Field(HX_("fk",45,59,00,00),hx::paccDynamic)) + HX_(",",2c,00,00,00))) );
HXDLIN( 127)				::String q3 = ((q2 + ::sys::db::Connection_obj::quote(cnx,::Std_obj::string( ::Dynamic(p1->__Field(HX_("time",0d,cc,fc,4c),hx::paccDynamic))))) + HX_(",",2c,00,00,00));
HXDLIN( 127)				::String q4 = ( (::String)(((q3 + p1->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) + HX_(")",29,00,00,00))) );
HXLINE( 128)				arr2->push(q4);
            			}
            		}
HXLINE( 131)		::haxe::Log_obj::trace(HX_("now?",69,1a,0a,49),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),131,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
HXLINE( 133)		::sys::db::Connection_obj::request(cnx,HX_("begin;",f2,f9,d6,9a));
HXLINE( 135)		{
HXLINE( 135)			int _g3 = 0;
HXDLIN( 135)			while((_g3 < allScores->length)){
HXLINE( 135)				 ::Dynamic p2 = allScores->__get(_g3);
HXDLIN( 135)				_g3 = (_g3 + 1);
HXLINE( 136)				::String q5 = ( (::String)(((((((HX_("INSERT INTO fa_game (us_id,room_id,round,coeds,win,lost,fk,time,times) VALUES(",f5,96,95,32) + p2->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p2->__Field(HX_("roomID",b6,2a,db,c7),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p2->__Field(HX_("round",4e,f8,65,ed),hx::paccDynamic)) + HX_(",",2c,00,00,00))) );
HXDLIN( 136)				::String q6 = ((q5 + ::sys::db::Connection_obj::quote(cnx,( (::Array< int >)(p2->__Field(HX_("cards",a3,f8,1f,41),hx::paccDynamic)) )->join(HX_(",",2c,00,00,00)))) + HX_(",",2c,00,00,00));
HXDLIN( 136)				::String q7 = ( (::String)(((((((q6 + p2->__Field(HX_("earnMoney",08,68,b9,04),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + p2->__Field(HX_("loseMoney",2b,bc,74,7a),hx::paccDynamic)) + HX_(" ,",0c,1c,00,00)) + p2->__Field(HX_("fk",45,59,00,00),hx::paccDynamic)) + HX_(",",2c,00,00,00))) );
HXDLIN( 136)				::String q8 = ((q7 + ::sys::db::Connection_obj::quote(cnx,::Std_obj::string( ::Dynamic(p2->__Field(HX_("time",0d,cc,fc,4c),hx::paccDynamic))))) + HX_(",",2c,00,00,00));
HXDLIN( 136)				::String q9 = ( (::String)(((q8 + p2->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) + HX_(")",29,00,00,00))) );
HXLINE( 139)				::Dynamic rs = ::sys::db::Connection_obj::request(cnx,q9);
            			}
            		}
HXLINE( 143)		::sys::db::Connection_obj::request(cnx,HX_("commit;",64,88,73,81));
HXLINE( 144)		::haxe::Log_obj::trace(HX_("finish",53,40,7f,86),hx::SourceInfo(HX_("src/TestSqlite.hx",f5,2a,e4,f2),144,HX_("TestSqlite",de,72,aa,62),HX_("main",39,38,56,48)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TestSqlite_obj,main,(void))


TestSqlite_obj::TestSqlite_obj()
{
}

bool TestSqlite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeAllChoices") ) { outValue = computeAllChoices_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TestSqlite_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestSqlite_obj_sStaticStorageInfo = 0;
#endif

hx::Class TestSqlite_obj::__mClass;

static ::String TestSqlite_obj_sStaticFields[] = {
	HX_("computeAllChoices",28,a1,0c,b9),
	HX_("main",39,38,56,48),
	::String(null())
};

void TestSqlite_obj::__register()
{
	TestSqlite_obj _hx_dummy;
	TestSqlite_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("TestSqlite",de,72,aa,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestSqlite_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestSqlite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TestSqlite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSqlite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSqlite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

