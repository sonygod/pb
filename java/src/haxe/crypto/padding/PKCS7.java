// Generated by Haxe 4.0.0-rc.5+b1fb4afca
package haxe.crypto.padding;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class PKCS7 extends haxe.lang.HxObject
{
	public PKCS7(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public PKCS7()
	{
		//line 6 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		haxe.crypto.padding.PKCS7.__hx_ctor_haxe_crypto_padding_PKCS7(this);
	}
	
	
	protected static void __hx_ctor_haxe_crypto_padding_PKCS7(haxe.crypto.padding.PKCS7 __hx_this)
	{
	}
	
	
	public static haxe.io.Bytes pad(haxe.io.Bytes ciphertext, int blockSize)
	{
		//line 9 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		try 
		{
			//line 10 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			if (( blockSize > 255 )) 
			{
				//line 10 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				throw haxe.lang.HaxeException.wrap("PKCS#7 padding cannot be longer than 255 bytes");
			}
			
			//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			if (( blockSize < 0 )) 
			{
				//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				throw haxe.lang.HaxeException.wrap("PKCS#7 padding size must be positive");
			}
			
			//line 12 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			haxe.io.BytesBuffer buffer = new haxe.io.BytesBuffer();
			//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			{
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				int len = ciphertext.length;
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				if (( ( len < 0 ) || ( len > ciphertext.length ) )) 
				{
					//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
					throw haxe.lang.HaxeException.wrap(haxe.io.Error.OutsideBounds);
				}
				
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				buffer.b.write(((byte[]) (ciphertext.b) ), ((int) (0) ), ((int) (len) ));
			}
			
			//line 14 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			int padding = ( blockSize - ( ciphertext.length % blockSize ) );
			//line 15 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			{
				//line 15 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				int _g = 0;
				//line 15 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				int _g1 = padding;
				//line 15 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				while (( _g < _g1 ))
				{
					//line 15 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
					int i = _g++;
					//line 16 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
					buffer.b.write(((int) (( padding & 255 )) ));
				}
				
			}
			
			//line 18 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			return buffer.getBytes();
		}
		catch (java.lang.Throwable typedException)
		{
			//line 8 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public static haxe.io.Bytes unpad(haxe.io.Bytes encrypt)
	{
		//line 23 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		int padding = ( encrypt.b[( encrypt.length - 1 )] & 255 );
		//line 24 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		if (( padding > encrypt.length )) 
		{
			//line 24 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			throw haxe.lang.HaxeException.wrap(( ( ( ( "Cannot remove " + padding ) + " bytes, because message is " ) + encrypt.length ) + " bytes" ));
		}
		
		//line 25 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		int block = ( encrypt.length - padding );
		//line 26 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		{
			//line 26 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			int _g = block;
			//line 26 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			int _g1 = encrypt.length;
			//line 26 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
			while (( _g < _g1 ))
			{
				//line 26 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				int i = _g++;
				//line 27 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
				if (( (( encrypt.b[i] & 255 )) != padding )) 
				{
					//line 27 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
					throw haxe.lang.HaxeException.wrap(( ( ( ( ( "Invalid padding value. Got " + (( encrypt.b[i] & 255 )) ) + ", expected " ) + padding ) + " at position " ) + i ));
				}
				
			}
			
		}
		
		//line 29 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\PKCS7.hx"
		return encrypt.sub(0, block);
	}
	
	
}


