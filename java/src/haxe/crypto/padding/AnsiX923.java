// Generated by Haxe 4.0.0-rc.5+b1fb4afca
package haxe.crypto.padding;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class AnsiX923 extends haxe.lang.HxObject
{
	public AnsiX923(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public AnsiX923()
	{
		//line 6 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
		haxe.crypto.padding.AnsiX923.__hx_ctor_haxe_crypto_padding_AnsiX923(this);
	}
	
	
	protected static void __hx_ctor_haxe_crypto_padding_AnsiX923(haxe.crypto.padding.AnsiX923 __hx_this)
	{
	}
	
	
	public static haxe.io.Bytes pad(haxe.io.Bytes ciphertext, int blockSize)
	{
		//line 9 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
		try 
		{
			//line 10 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			haxe.io.BytesBuffer buffer = new haxe.io.BytesBuffer();
			//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			{
				//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				int len = ciphertext.length;
				//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				if (( ( len < 0 ) || ( len > ciphertext.length ) )) 
				{
					//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
					throw haxe.lang.HaxeException.wrap(haxe.io.Error.OutsideBounds);
				}
				
				//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				buffer.b.write(((byte[]) (ciphertext.b) ), ((int) (0) ), ((int) (len) ));
			}
			
			//line 12 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			int padding = ( ( blockSize - ( ciphertext.length % blockSize ) ) - 1 );
			//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			{
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				int _g = 0;
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				int _g1 = padding;
				//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
				while (( _g < _g1 ))
				{
					//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
					int i = _g++;
					//line 14 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
					buffer.b.write(((int) (0) ));
				}
				
			}
			
			//line 16 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			buffer.b.write(((int) (( padding + 1 )) ));
			//line 17 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			return buffer.getBytes();
		}
		catch (java.lang.Throwable typedException)
		{
			//line 8 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public static haxe.io.Bytes unpad(haxe.io.Bytes encrypt)
	{
		//line 22 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
		int padding = ( encrypt.b[( encrypt.length - 1 )] & 255 );
		//line 23 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\padding\\AnsiX923.hx"
		return encrypt.sub(0, ( encrypt.length - padding ));
	}
	
	
}


