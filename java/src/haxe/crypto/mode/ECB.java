// Generated by Haxe 4.0.0-rc.5+b1fb4afca
package haxe.crypto.mode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class ECB extends haxe.lang.HxObject
{
	public ECB(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public ECB()
	{
		//line 5 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		haxe.crypto.mode.ECB.__hx_ctor_haxe_crypto_mode_ECB(this);
	}
	
	
	protected static void __hx_ctor_haxe_crypto_mode_ECB(haxe.crypto.mode.ECB __hx_this)
	{
	}
	
	
	public static void encrypt(haxe.io.Bytes src, int blockSize, haxe.lang.Function encryptBlock)
	{
		//line 9 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		int i = 0;
		//line 10 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		int len = src.length;
		//line 11 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		while (( i < len ))
		{
			//line 13 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
			encryptBlock.__hx_invoke4_o(0.0, src, ((double) (i) ), haxe.lang.Runtime.undefined, 0.0, src, ((double) (i) ), haxe.lang.Runtime.undefined);
			//line 14 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
			i += blockSize;
		}
		
	}
	
	
	public static void decrypt(haxe.io.Bytes src, int blockSize, haxe.lang.Function decryptBlock)
	{
		//line 20 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		int i = 0;
		//line 21 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		int len = src.length;
		//line 22 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
		while (( i < len ))
		{
			//line 24 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
			decryptBlock.__hx_invoke4_o(0.0, src, ((double) (i) ), haxe.lang.Runtime.undefined, 0.0, src, ((double) (i) ), haxe.lang.Runtime.undefined);
			//line 25 "C:\\HaxeToolkit\\haxe\\lib\\crypto\\0,3,0\\src\\haxe\\crypto\\mode\\ECB.hx"
			i += blockSize;
		}
		
	}
	
	
}


